Index: src/NodaMoney/Currency.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\r\nusing System.Collections.Generic;\r\nusing System.ComponentModel;\r\nusing System.Diagnostics;\r\nusing System.Diagnostics.CodeAnalysis;\r\nusing System.Globalization;\r\nusing System.Runtime.CompilerServices;\r\nusing System.Runtime.Serialization;\r\nusing System.Xml;\r\nusing System.Xml.Schema;\r\nusing System.Xml.Serialization;\r\n\r\n[assembly: InternalsVisibleTo(\"NodaMoney.Tests\")]\r\n[assembly: CLSCompliant(true)]\r\n\r\nnamespace NodaMoney\r\n{\r\n    /// <summary>A unit of exchange of value, a currency of <see cref=\"Money\" />.</summary>\r\n    /// <remarks>See http://en.wikipedia.org/wiki/Currency .</remarks>\r\n    [Serializable]\r\n    [DebuggerDisplay(\"{Code}\")]\r\n    [TypeConverter(typeof(CurrencyTypeConverter))]\r\n    public readonly struct Currency : IEquatable<Currency>, IXmlSerializable, ISerializable\r\n    {\r\n        /// <summary>Gets the currency sign (¤), a character used to denote the generic currency sign, when no currency sign is available.</summary>\r\n        /// <remarks>See https://en.wikipedia.org/wiki/Currency_sign_(typography). </remarks>\r\n        public const string GenericCurrencySign = \"¤\";\r\n\r\n        private readonly byte _minorUnit;\r\n        private readonly byte _namespace;\r\n        private readonly short _number;\r\n        private readonly string _code;\r\n        private readonly string _symbol;\r\n        private readonly string _englishName;\r\n        private readonly DateTime? _validFrom;\r\n        private readonly DateTime? _validTo;\r\n\r\n        /// <summary>Initializes a new instance of the <see cref=\"Currency\" /> struct.</summary>\r\n        /// <param name=\"code\">The code.</param>\r\n        /// <param name=\"namespace\">The namespace.</param>\r\n        /// <remarks>Used in serialization.</remarks>\r\n        internal Currency(string code, string @namespace = \"ISO-4217\")\r\n        {\r\n            ref Currency c = ref FromCode(code, @namespace);\r\n\r\n            _code = c.Code;\r\n            _number = c.Number;\r\n            _minorUnit = c._minorUnit;\r\n            _englishName = c.EnglishName;\r\n            _symbol = c.Symbol;\r\n            _namespace = c._namespace;\r\n            _validTo = c.ValidTo;\r\n            _validFrom = c.ValidFrom;\r\n        }\r\n\r\n        /// <summary>Initializes a new instance of the <see cref=\"Currency\" /> struct.</summary>\r\n        /// <param name=\"code\">The code.</param>\r\n        /// <param name=\"number\">The number.</param>\r\n        /// <param name=\"minorUnitAsPowerOfTen\">The decimal digits.</param>\r\n        /// <param name=\"englishName\">Name of the english.</param>\r\n        /// <param name=\"symbol\">The currency symbol.</param>\r\n        /// <param name=\"namespace\">The namespace of the currency.</param>\r\n        /// <param name=\"validTo\">The valid until the specified date.</param>\r\n        /// <param name=\"validFrom\">The valid from the specified date.</param>\r\n        /// <exception cref=\"System.ArgumentNullException\">code or number or englishName or symbol is null.</exception>\r\n        /// <exception cref=\"System.ArgumentOutOfRangeException\">DecimalDigits must greater or equal to zero and smaller or equal to 28, or -1 if not applicable.</exception>\r\n        internal Currency(string code, short number, byte minorUnitAsPowerOfTen, string englishName, string symbol, byte @namespace = 0, DateTime? validTo = null, DateTime? validFrom = null)\r\n            : this()\r\n        {\r\n            if (string.IsNullOrWhiteSpace(code))\r\n                throw new ArgumentException(\"Value cannot be null or whitespace.\", nameof(code));\r\n            if (minorUnitAsPowerOfTen != CurrencyRegistry.Z07Byte && minorUnitAsPowerOfTen != CurrencyRegistry.NotApplicableByte && (minorUnitAsPowerOfTen < 0 || minorUnitAsPowerOfTen > 28))\r\n                throw new ArgumentOutOfRangeException(nameof(minorUnitAsPowerOfTen), $\"For code {code} DecimalDigits must greater or equal to zero and smaller or equal to 28, or 255 if not applicable!\");\r\n\r\n            _code = code;\r\n            _number = number;\r\n            _minorUnit = minorUnitAsPowerOfTen;\r\n            _englishName = englishName ?? string.Empty;\r\n            _symbol = symbol ?? GenericCurrencySign;\r\n            _namespace = @namespace;\r\n            _validTo = validTo;\r\n            _validFrom = validFrom;\r\n        }\r\n\r\n#pragma warning disable CA1801 // Parameter context of method.ctor is never used.\r\n        private Currency(SerializationInfo info, StreamingContext context)\r\n        : this(info.GetString(\"code\"), info.GetString(\"namespace\"))\r\n        {\r\n        }\r\n#pragma warning restore CA1801 // Parameter context of method.ctor is never used.\r\n\r\n        /// <summary>Gets the Currency that represents the country/region used by the current thread.</summary>\r\n        /// <value>The Currency that represents the country/region used by the current thread.</value>\r\n        public static ref Currency CurrentCurrency\r\n        {\r\n            get\r\n            {\r\n                var currentRegion = RegionInfo.CurrentRegion;\r\n                return ref currentRegion.Name == \"IV\" ? ref FromCode(\"XXX\") : ref FromRegion(currentRegion);\r\n            }\r\n        }\r\n\r\n        /// <summary>Gets the currency symbol.</summary>\r\n        public string Symbol\r\n        {\r\n            get\r\n            {\r\n                IfDefaultThenInitializeToNoCurrency();\r\n                return _symbol;\r\n            }\r\n        }\r\n\r\n        /// <summary>Gets the english name of the currency.</summary>\r\n        public string EnglishName\r\n        {\r\n            get\r\n            {\r\n                IfDefaultThenInitializeToNoCurrency();\r\n                return _englishName;\r\n            }\r\n        }\r\n\r\n        /// <summary>Gets the (ISO-4217) three-character code of the currency.</summary>\r\n        public string Code\r\n        {\r\n            get\r\n            {\r\n                IfDefaultThenInitializeToNoCurrency();\r\n                return _code;\r\n            }\r\n        }\r\n\r\n        /// <summary>Gets the (ISO-4217) number of the currency.</summary>\r\n        public short Number\r\n        {\r\n            get\r\n            {\r\n                IfDefaultThenInitializeToNoCurrency();\r\n                return _number;\r\n            }\r\n        }\r\n\r\n        /// <summary>Gets the (ISO-4217) three-digit code number of the currency.</summary>\r\n        public string NumericCode => Number.ToString(\"D3\", CultureInfo.InvariantCulture);\r\n\r\n        /// <summary>Gets the namespace of the currency, like ISO-4217.</summary>\r\n        public string Namespace\r\n        {\r\n            get\r\n            {\r\n                return CurrencyRegistry.GetNamespace(_namespace);\r\n            }\r\n        }\r\n\r\n        /// <summary>Gets the number of digits after the decimal separator.</summary>\r\n        /// <remarks>\r\n        /// <para>\r\n        /// For example, the default number of fraction digits for the US Dollar and Euro is 2, while for the Japanese Yen it's 0.\r\n        /// In the case of pseudo-currencies, such as Gold or IMF Special Drawing Rights, 0 is returned.\r\n        /// </para>\r\n        /// <para>\r\n        /// Mauritania does not use a decimal division of units, setting 1 ouguiya (UM) equal to 5 khoums, and Madagascar has 1 ariary =\r\n        /// 5 iraimbilanja. The coins display \"1/5\" on their face and are referred to as a \"fifth\". These are not used in practice, but when\r\n        /// written out, a single significant digit is used (E.g. 1.2 UM), so 1 is returned.\r\n        /// </para>\r\n        /// </remarks>\r\n        public int DecimalDigits\r\n        {\r\n            get\r\n            {\r\n                IfDefaultThenInitializeToNoCurrency();\r\n                return _minorUnit switch\r\n                {\r\n                    CurrencyRegistry.NotApplicableByte => 0,\r\n                    CurrencyRegistry.Z07Byte => 1,\r\n                    _ => _minorUnit,\r\n                };\r\n            }\r\n        }\r\n\r\n        /// <summary>Gets the smallest amount of the currency unit.</summary>\r\n        public decimal MinimalAmount\r\n        {\r\n            get\r\n            {\r\n                IfDefaultThenInitializeToNoCurrency();\r\n                return MinorUnit == 0 ? 1m : (decimal)(1.0 / Math.Pow(10, MinorUnit));\r\n            }\r\n        }\r\n\r\n        /// <summary>Gets the minor unit, as an exponent of base 10, by which the currency unit can be divided in.</summary>\r\n        /// <para>\r\n        /// The US dollar can be divided into 100 cents (1/100), which is 10^2, so the exponent 2 will be returned.\r\n        /// </para>\r\n        /// <para>\r\n        /// Mauritania does not use a decimal division of units, but has 1 ouguiya (UM) which can be divided int 5 khoums (1/5), which is\r\n        /// 10^log10(5) = 10^0.698970004, so the exponent 0.698970004 will be returned.\r\n        /// </para>\r\n        public double MinorUnit\r\n        {\r\n            get\r\n            {\r\n                // https://www.iso.org/obp/ui/#iso:std:iso:4217:ed-8:v1:en\r\n                // unit of recorded value (i.e. as recorded by banks) which is a division of the respective unit of currency or fund\r\n                IfDefaultThenInitializeToNoCurrency();\r\n                return _minorUnit switch\r\n                {\r\n                    CurrencyRegistry.NotApplicableByte => 0,\r\n                    CurrencyRegistry.Z07Byte => Math.Log10(5),\r\n                    _ => _minorUnit,\r\n                };\r\n            }\r\n        }\r\n\r\n        /// <summary>Gets the number of minor units by which the currency unit can be divided in.</summary>\r\n        /// <para>\r\n        /// The US dollar can be divided into 100 cents (1/100) so the 100 will be returned.\r\n        /// </para>\r\n        /// <para>\r\n        /// Mauritania does not use a decimal division of units, but has 1 ouguiya (UM) which can be divided int 5 khoums (1/5),\r\n        /// so 5 will be returned.\r\n        /// </para>\r\n        public double MinorUnits\r\n        {\r\n            get\r\n            {\r\n                IfDefaultThenInitializeToNoCurrency();\r\n                return Math.Pow(10, MinorUnit);\r\n            }\r\n        }\r\n\r\n        /// <summary>Gets the date when the currency is valid from.</summary>\r\n        /// <value>The from date when the currency is valid.</value>\r\n        public DateTime? ValidFrom\r\n        {\r\n            get\r\n            {\r\n                IfDefaultThenInitializeToNoCurrency();\r\n                return _validFrom;\r\n            }\r\n        }\r\n\r\n        /// <summary>Gets the date when the currency is valid to.</summary>\r\n        /// <value>The to date when the currency is valid.</value>\r\n        public DateTime? ValidTo\r\n        {\r\n            get\r\n            {\r\n                IfDefaultThenInitializeToNoCurrency();\r\n                return _validTo;\r\n            }\r\n        }\r\n\r\n        /// <summary>Gets a value indicating whether currency is valid.</summary>\r\n        /// <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>\r\n        public bool IsValid => IsValidOn(DateTime.Today);\r\n\r\n        /// <summary>Implements the operator ==.</summary>\r\n        /// <param name=\"left\">The left Currency.</param>\r\n        /// <param name=\"right\">The right Currency.</param>\r\n        /// <returns>The result of the operator.</returns>\r\n        public static bool operator ==(Currency left, Currency right) => left.Equals(right);\r\n\r\n        /// <summary>Implements the operator ==.</summary>\r\n        /// <param name=\"left\">The left Currency.</param>\r\n        /// <param name=\"right\">The right Currency.</param>\r\n        /// <returns>The result of the operator.</returns>\r\n        public static bool operator !=(Currency left, Currency right) => !(left == right);\r\n\r\n        /// <summary>Create an instance of the <see cref=\"Currency\"/>, based on a ISO 4217 currency code.</summary>\r\n        /// <param name=\"code\">A ISO 4217 currency code, like EUR or USD.</param>\r\n        /// <returns>An instance of the type <see cref=\"Currency\"/>.</returns>\r\n        /// <exception cref=\"ArgumentNullException\">The value of 'code' cannot be null.</exception>\r\n        /// <exception cref=\"ArgumentException\">The 'code' is an unknown ISO 4217 currency code.</exception>\r\n        public static ref Currency FromCode(string code)\r\n        {\r\n            return ref CurrencyRegistry.Get(code);\r\n        }\r\n\r\n        /// <summary>Create an instance of the <see cref=\"Currency\"/> of the given code and namespace.</summary>\r\n        /// <param name=\"code\">A currency code, like EUR or USD.</param>\r\n        /// <param name=\"namespace\">A namespace, like ISO-4217.</param>\r\n        /// <returns>An instance of the type <see cref=\"Currency\"/>.</returns>\r\n        /// <exception cref=\"ArgumentNullException\">The value of 'code' or 'namespace' cannot be null or empty.</exception>\r\n        /// <exception cref=\"ArgumentException\">The 'code' in the given namespace is an unknown.</exception>\r\n        public static ref Currency FromCode(string code, string @namespace)\r\n        {\r\n            return ref CurrencyRegistry.Get(code, @namespace);\r\n        }\r\n\r\n        /// <summary>Creates an instance of the <see cref=\"Currency\"/> used within the specified <see cref=\"RegionInfo\"/>.</summary>\r\n        /// <param name=\"region\"><see cref=\"RegionInfo\"/> to get a <see cref=\"Currency\"/> for.</param>\r\n        /// <returns>The <see cref=\"Currency\"/> instance used within the specified <see cref=\"RegionInfo\"/>.</returns>\r\n        /// <exception cref=\"ArgumentNullException\">The value of 'region' cannot be null.</exception>\r\n        /// <exception cref=\"ArgumentException\">The 'code' is an unknown ISO 4217 currency code.</exception>\r\n        public static ref Currency FromRegion(RegionInfo region)\r\n        {\r\n            if (region == null)\r\n                throw new ArgumentNullException(nameof(region));\r\n\r\n            return ref FromCode(region.ISOCurrencySymbol, \"ISO-4217\");\r\n        }\r\n\r\n        /// <summary>Creates an instance of the <see cref=\"Currency\"/> used within the specified <see cref=\"CultureInfo\"/>.</summary>\r\n        /// <param name=\"culture\"><see cref=\"CultureInfo\"/> to get a <see cref=\"Currency\"/> for.</param>\r\n        /// <returns>The <see cref=\"Currency\"/> instance used within the specified <see cref=\"CultureInfo\"/>.</returns>\r\n        /// <exception cref=\"ArgumentNullException\">The value of 'culture' cannot be null.</exception>\r\n        /// <exception cref=\"ArgumentException\">\r\n        /// Culture is a neutral culture, from which no region information can be extracted -or-\r\n        /// The 'code' is an unknown ISO 4217 currency code.\r\n        /// </exception>\r\n        public static ref Currency FromCulture(CultureInfo culture)\r\n        {\r\n            if (culture == null)\r\n                throw new ArgumentNullException(nameof(culture));\r\n            if (culture.IsNeutralCulture)\r\n                throw new ArgumentException(\"Culture {0} is a neutral culture, from which no region information can be extracted!\", culture.Name);\r\n\r\n            return ref FromRegion(culture.Name);\r\n        }\r\n\r\n        /// <summary>Creates an instance of the <see cref=\"Currency\"/> used within the specified name of the region or culture.</summary>\r\n        /// <param name=\"name\">\r\n        /// <para>A string that contains a two-letter code defined in ISO 3166 for country/region.</para>\r\n        /// <para>-or-</para>\r\n        /// <para>A string that contains the culture name for a specific culture, custom culture, or Windows-only culture. If the\r\n        /// culture name is not in RFC 4646 format, your application should specify the entire culture name instead of just the\r\n        /// country/region. See also <seealso cref=\"System.Globalization.RegionInfo(string)\"/>.</para>\r\n        /// </param>\r\n        /// <returns>The <see cref=\"Currency\"/> instance used within the specified region.</returns>\r\n        /// <exception cref=\"ArgumentNullException\">The value of 'name' cannot be null.</exception>\r\n        public static ref Currency FromRegion(string name)\r\n        {\r\n            if (string.IsNullOrWhiteSpace(name))\r\n                throw new ArgumentNullException(nameof(name));\r\n\r\n            return ref FromRegion(new RegionInfo(name));\r\n        }\r\n\r\n        /// <summary>Get all currencies.</summary>\r\n        /// <returns>An <see cref=\"IEnumerable{Currency}\"/> of all registered currencies.</returns>\r\n        public static IEnumerable<Currency> GetAllCurrencies() => CurrencyRegistry.GetAllCurrencies();\r\n\r\n        /// <summary>Returns a value indicating whether two specified instances of <see cref=\"Currency\"/> represent the same value.</summary>\r\n        /// <param name=\"left\">The first <see cref=\"Currency\"/> object.</param>\r\n        /// <param name=\"right\">The second <see cref=\"Currency\"/> object.</param>\r\n        /// <returns>true if left and right are equal to this instance; otherwise, false.</returns>\r\n        [SuppressMessage(\"Microsoft.Design\", \"CA1062:Validate arguments of public methods\", MessageId = \"0\", Justification = \"Calling override method\")]\r\n        public static bool Equals(Currency left, Currency right) => left.Equals(right);\r\n\r\n        /// <summary>Returns a value indicating whether this instance and a specified <see cref=\"object\"/> represent the same type and value.</summary>\r\n        /// <param name=\"obj\">An <see cref=\"object\"/>.</param>\r\n        /// <returns>true if value is equal to this instance; otherwise, false.</returns>\r\n        public override bool Equals(object obj) => obj is Currency currency && Equals(currency);\r\n\r\n        /// <summary>Returns a value indicating whether this instance and a specified <see cref=\"Currency\"/> object represent the same value.</summary>\r\n        /// <param name=\"other\">A <see cref=\"Currency\"/> object.</param>\r\n        /// <returns>true if value is equal to this instance; otherwise, false.</returns>\r\n        [SuppressMessage(\"Microsoft.Design\", \"CA1062:Validate arguments of public methods\", MessageId = \"0\", Justification = \"Calling override method\")]\r\n        public bool Equals(Currency other)\r\n        {\r\n            return Code == other.Code && Namespace == other.Namespace;\r\n        }\r\n\r\n        /// <summary>Returns the hash code for this instance.</summary>\r\n        /// <returns>A 32-bit signed integer hash code.</returns>\r\n        public override int GetHashCode()\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 17;\r\n#pragma warning disable CA1307 // Specify StringComparison\r\n                hash = (hash * 23) + (Code?.GetHashCode() ?? 0);\r\n#pragma warning restore CA1307 // Specify StringComparison\r\n                return (hash * 23) + _namespace.GetHashCode();\r\n            }\r\n        }\r\n\r\n        /// <summary>Deconstructs the current instance into its components.</summary>\r\n        /// <param name=\"code\">The code.</param>\r\n        /// <param name=\"isoNumber\">The ISO4127 three-digit code number.</param>\r\n        /// <param name=\"symbol\">The currency symbol.</param>\r\n        public void Deconstruct(out string code, out string isoNumber, out string symbol)\r\n        {\r\n            code = Code;\r\n            isoNumber = NumericCode;\r\n            symbol = Symbol;\r\n        }\r\n\r\n        /// <summary>Check a value indication whether currency is valid on a given date.</summary>\r\n        /// <param name=\"date\">The date on which the Currency should be valid.</param>\r\n        /// <returns><c>true</c> when the date is within the valid range of this currency; otherwise <c>false</c>.</returns>\r\n        public bool IsValidOn(DateTime date)\r\n        {\r\n            return\r\n                (!ValidFrom.HasValue || ValidFrom <= date) &&\r\n                (!ValidTo.HasValue || ValidTo >= date);\r\n        }\r\n\r\n        /// <summary>This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should\r\n        /// return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply\r\n        /// the <see cref=\"XmlSchemaProviderAttribute\" /> to the class.</summary>\r\n        /// <returns>An <see cref=\"XmlSchema\" /> that describes the XML representation of the object that is\r\n        /// produced by the <see cref=\"IXmlSerializable.WriteXml(XmlWriter)\" /> method and\r\n        /// consumed by the <see cref=\"IXmlSerializable.ReadXml(XmlReader)\" /> method.\r\n        /// </returns>\r\n        public XmlSchema GetSchema() => null;\r\n\r\n        /// <summary>Generates an object from its XML representation.</summary>\r\n        /// <param name=\"reader\">The <see cref=\"XmlReader\" /> stream from which the object is deserialized.</param>\r\n        /// <exception cref=\"ArgumentNullException\">The value of 'reader' cannot be null. </exception>\r\n        public void ReadXml(XmlReader reader)\r\n        {\r\n            if (reader == null)\r\n                throw new ArgumentNullException(nameof(reader));\r\n\r\n            Unsafe.AsRef(this) = FromCode(reader[\"Currency\"]);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Converts an object into its XML representation.\r\n        /// </summary>\r\n        /// <param name=\"writer\">The <see cref=\"XmlWriter\" /> stream to which the object is serialized.</param>\r\n        /// <exception cref=\"ArgumentNullException\">The value of 'writer' cannot be null.</exception>\r\n        public void WriteXml(XmlWriter writer)\r\n        {\r\n            if (writer == null)\r\n                throw new ArgumentNullException(nameof(writer));\r\n\r\n            writer.WriteAttributeString(\"Currency\", Code);\r\n        }\r\n\r\n        /// <summary>Populates a <see cref=\"SerializationInfo\" /> with the data needed to serialize the target object.</summary>\r\n        /// <param name=\"info\">The <see cref=\"SerializationInfo\" /> to populate with data. </param>\r\n        /// <param name=\"context\">The destination (see <see cref=\"StreamingContext\" />) for this serialization. </param>\r\n        /// <exception cref=\"System.Security.SecurityException\">The caller does not have the required permission. </exception>\r\n        public void GetObjectData(SerializationInfo info, StreamingContext context)\r\n        {\r\n            if (info == null)\r\n                throw new ArgumentNullException(nameof(info));\r\n\r\n            info.AddValue(\"code\", Code);\r\n            info.AddValue(\"namespace\", Namespace);\r\n        }\r\n\r\n        /// <summary>Returns a hash code for this instance.</summary>\r\n        /// <param name=\"code\">The code.</param>\r\n        /// <param name=\"namespace\">The @namespace.</param>\r\n        /// <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>\r\n        internal static int GetHashCode(in string code, in int @namespace)\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 17;\r\n#pragma warning disable CA1307 // Specify StringComparison\r\n                hash = (hash * 23) + (code?.GetHashCode() ?? 0);\r\n#pragma warning restore CA1307 // Specify StringComparison\r\n                return (hash * 23) + ((byte)@namespace).GetHashCode();\r\n            }\r\n        }\r\n\r\n        /// <summary>Check if default(currency) is used. I so, then initialize it to {XXX, 999, No currency}.</summary>\r\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n        internal void IfDefaultThenInitializeToNoCurrency()\r\n        {\r\n            if (_code == null)\r\n                Unsafe.AsRef(this) = FromCode(\"XXX\");\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/NodaMoney/Currency.cs b/src/NodaMoney/Currency.cs
--- a/src/NodaMoney/Currency.cs	
+++ b/src/NodaMoney/Currency.cs	
@@ -20,7 +20,7 @@
     [Serializable]
     [DebuggerDisplay("{Code}")]
     [TypeConverter(typeof(CurrencyTypeConverter))]
-    public readonly struct Currency : IEquatable<Currency>, IXmlSerializable, ISerializable
+    public record class Currency : IEquatable<Currency>, IXmlSerializable, ISerializable
     {
         /// <summary>Gets the currency sign (¤), a character used to denote the generic currency sign, when no currency sign is available.</summary>
         /// <remarks>See https://en.wikipedia.org/wiki/Currency_sign_(typography). </remarks>
@@ -65,7 +65,7 @@
         /// <exception cref="System.ArgumentNullException">code or number or englishName or symbol is null.</exception>
         /// <exception cref="System.ArgumentOutOfRangeException">DecimalDigits must greater or equal to zero and smaller or equal to 28, or -1 if not applicable.</exception>
         internal Currency(string code, short number, byte minorUnitAsPowerOfTen, string englishName, string symbol, byte @namespace = 0, DateTime? validTo = null, DateTime? validFrom = null)
-            : this()
+            //: this()
         {
             if (string.IsNullOrWhiteSpace(code))
                 throw new ArgumentException("Value cannot be null or whitespace.", nameof(code));
@@ -255,17 +255,17 @@
         /// <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
         public bool IsValid => IsValidOn(DateTime.Today);
 
-        /// <summary>Implements the operator ==.</summary>
-        /// <param name="left">The left Currency.</param>
-        /// <param name="right">The right Currency.</param>
-        /// <returns>The result of the operator.</returns>
-        public static bool operator ==(Currency left, Currency right) => left.Equals(right);
-
-        /// <summary>Implements the operator ==.</summary>
-        /// <param name="left">The left Currency.</param>
-        /// <param name="right">The right Currency.</param>
-        /// <returns>The result of the operator.</returns>
-        public static bool operator !=(Currency left, Currency right) => !(left == right);
+        // /// <summary>Implements the operator ==.</summary>
+        // /// <param name="left">The left Currency.</param>
+        // /// <param name="right">The right Currency.</param>
+        // /// <returns>The result of the operator.</returns>
+        // public static bool operator ==(Currency left, Currency right) => left.Equals(right);
+        //
+        // /// <summary>Implements the operator ==.</summary>
+        // /// <param name="left">The left Currency.</param>
+        // /// <param name="right">The right Currency.</param>
+        // /// <returns>The result of the operator.</returns>
+        // public static bool operator !=(Currency left, Currency right) => !(left == right);
 
         /// <summary>Create an instance of the <see cref="Currency"/>, based on a ISO 4217 currency code.</summary>
         /// <param name="code">A ISO 4217 currency code, like EUR or USD.</param>
@@ -348,19 +348,19 @@
         [SuppressMessage("Microsoft.Design", "CA1062:Validate arguments of public methods", MessageId = "0", Justification = "Calling override method")]
         public static bool Equals(Currency left, Currency right) => left.Equals(right);
 
-        /// <summary>Returns a value indicating whether this instance and a specified <see cref="object"/> represent the same type and value.</summary>
-        /// <param name="obj">An <see cref="object"/>.</param>
-        /// <returns>true if value is equal to this instance; otherwise, false.</returns>
-        public override bool Equals(object obj) => obj is Currency currency && Equals(currency);
-
-        /// <summary>Returns a value indicating whether this instance and a specified <see cref="Currency"/> object represent the same value.</summary>
-        /// <param name="other">A <see cref="Currency"/> object.</param>
-        /// <returns>true if value is equal to this instance; otherwise, false.</returns>
-        [SuppressMessage("Microsoft.Design", "CA1062:Validate arguments of public methods", MessageId = "0", Justification = "Calling override method")]
-        public bool Equals(Currency other)
-        {
-            return Code == other.Code && Namespace == other.Namespace;
-        }
+        // /// <summary>Returns a value indicating whether this instance and a specified <see cref="object"/> represent the same type and value.</summary>
+        // /// <param name="obj">An <see cref="object"/>.</param>
+        // /// <returns>true if value is equal to this instance; otherwise, false.</returns>
+        // public override bool Equals(object obj) => obj is Currency currency && Equals(currency);
+        //
+        // /// <summary>Returns a value indicating whether this instance and a specified <see cref="Currency"/> object represent the same value.</summary>
+        // /// <param name="other">A <see cref="Currency"/> object.</param>
+        // /// <returns>true if value is equal to this instance; otherwise, false.</returns>
+        // [SuppressMessage("Microsoft.Design", "CA1062:Validate arguments of public methods", MessageId = "0", Justification = "Calling override method")]
+        // public bool Equals(Currency other)
+        // {
+        //     return Code == other.Code && Namespace == other.Namespace;
+        // }
 
         /// <summary>Returns the hash code for this instance.</summary>
         /// <returns>A 32-bit signed integer hash code.</returns>
Index: src/NodaMoney/CurrencyRegistry.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\r\nusing System.Collections.Generic;\r\nusing System.Diagnostics;\r\nusing System.Linq;\r\n\r\nnamespace NodaMoney\r\n{\r\n    /// <summary>Represent the central thread-safe registry for currencies.</summary>\r\n    internal static class CurrencyRegistry\r\n    {\r\n        /// <summary>\r\n        /// Mauritania does not use a decimal division of units, setting 1 ouguiya (UM) equal to 5 khoums, and Madagascar has 1 ariary =\r\n        /// 5 iraimbilanja. The coins display \"1/5\" on their face and are referred to as a \"fifth\". These are not used in practice, but when\r\n        /// written out, a single significant digit is used. E.g. 1.2 UM.\r\n        /// </summary>\r\n        // internal const double Z07 = 0.69897000433601880478626110527551; // Math.Log10(5);\r\n        internal const byte Z07Byte = 105; // Math.Log10(5);\r\n\r\n        /// <summary>Used for indication that the number of decimal digits doesn't matter, for example for gold or silver.</summary>\r\n        internal const double NotApplicable = -1;\r\n        internal const byte NotApplicableByte = 255;\r\n\r\n        /// <summary>Shortcut for namespace indexes.</summary>\r\n        /// private const int Iso4217 = 0;\r\n        private const int Iso4217Historic = 1;\r\n\r\n        private static readonly Dictionary<int, int> Index;\r\n        private static Currency[] currencies;\r\n        private static string[] namespaces = { \"ISO-4217\", \"ISO-4217-HISTORIC\" };\r\n\r\n        // TODO: tryout CurrencyUnit\r\n        static readonly Dictionary<CurrencyUnit, Currency> LookupCurrencies;\r\n\r\n        private static object changeLock = new object();\r\n\r\n        //private static Currency[][] CurrenciesJagged = new Currency[2][];\r\n        //private static readonly Dictionary<int, short> IsoKeyLookup;\r\n\r\n        static CurrencyRegistry()\r\n        {\r\n            currencies = InitializeIsoCurrenciesArray();\r\n\r\n            // TODO: Parallel foreach? ReadOnlySpan<T>\r\n            Index = new Dictionary<int, int>(currencies.Length);\r\n            int i = 0;\r\n            foreach (var c in currencies)\r\n            {\r\n                Index[c.GetHashCode()] = i++;\r\n            }\r\n            \r\n            // TODO: tryout CurrencyUnit\r\n            LookupCurrencies = new Dictionary<CurrencyUnit, Currency>(currencies.Length);\r\n            foreach (var ci in currencies)\r\n            {\r\n                var cu = new CurrencyUnit(ci.Code);\r\n                LookupCurrencies[cu] = ci;\r\n            }\r\n\r\n            // var xa = Currencies.AsMemory();\r\n            // TODO: Use ReadOnlySpan<T> or ReadOnlyMemory<T>  to split up namespaces? 0..999 ISO4127, 1000..9999 ISO4127-HISTORIC\r\n            // To much useless gaps, but for first 0..999 performance boost, because of no key lookup?\r\n\r\n            // Using JaggedArray\r\n            //IsoKeyLookup = new Dictionary<int, short>(1000);\r\n            //CurrenciesJagged[0] = new Currency[1000];\r\n            //foreach (var keyValuePair in x)\r\n            //{\r\n            //    if (keyValuePair.Value.Namespace == \"ISO-4217\")\r\n            //    {\r\n            //        IsoKeyLookup[keyValuePair.Value.Code.GetHashCode()] = keyValuePair.Value.Number;\r\n            //        CurrenciesJagged[0][keyValuePair.Value.Number] = keyValuePair.Value;\r\n            //    }\r\n            //}\r\n        }\r\n\r\n        /// <summary>Tries the get <see cref=\"Currency\"/> of the given code and namespace.</summary>\r\n        /// <param name=\"code\">A currency code, like EUR or USD.</param>\r\n        /// <returns><b>true</b> if <see cref=\"CurrencyRegistry\"/> contains a <see cref=\"Currency\"/> with the specified code; otherwise, <b>false</b>.</returns>\r\n        /// <exception cref=\"System.ArgumentNullException\">The value of 'code' cannot be null or empty.</exception>\r\n        public static ref Currency Get(string code)\r\n        {\r\n            if (string.IsNullOrWhiteSpace(code))\r\n                throw new ArgumentNullException(nameof(code));\r\n            \r\n            // Using JaggedArray\r\n            //if (IsoKeyLookup.TryGetValue(code.GetHashCode(), out short number))\r\n            //{\r\n            //    return ref CurrenciesJagged[0][number];\r\n            //}\r\n\r\n            for (int i = 0; i < namespaces.Length; i++)\r\n            {\r\n                int hash = Currency.GetHashCode(code, (byte)i);\r\n                if (Index.TryGetValue(hash, out int index))\r\n                {\r\n                    return ref currencies[index]; // TODO: If more than one, sort by prio.\r\n                }\r\n            }\r\n\r\n            throw new InvalidCurrencyException($\"{code} is unknown currency code!\");\r\n        }\r\n\r\n        /// <summary>Tries the get <see cref=\"Currency\"/> of the given code and namespace.</summary>\r\n        /// <param name=\"code\">A currency code, like EUR or USD.</param>\r\n        /// <param name=\"namespace\">A namespace, like ISO-4217.</param>\r\n        /// <returns><b>true</b> if <see cref=\"CurrencyRegistry\"/> contains a <see cref=\"Currency\"/> with the specified code; otherwise, <b>false</b>.</returns>\r\n        /// <exception cref=\"System.ArgumentNullException\">The value of 'code' or 'namespace' cannot be null or empty.</exception>\r\n        public static ref Currency Get(string code, string @namespace)\r\n        {\r\n            if (string.IsNullOrWhiteSpace(code))\r\n                throw new ArgumentNullException(nameof(code));\r\n            if (string.IsNullOrWhiteSpace(@namespace))\r\n                throw new ArgumentNullException(nameof(@namespace));\r\n\r\n            // Using JaggedArray\r\n            //if (@namespace == \"ISO-4217\")\r\n            //{\r\n            //    if (!IsoKeyLookup.TryGetValue(code.GetHashCode(), out short number))\r\n            //        throw new InvalidCurrencyException($\"{code} is an unknown {@namespace} currency code!\");\r\n\r\n            //    return ref CurrenciesJagged[0][number];\r\n            //}\r\n\r\n            //return ref CurrenciesJagged[0][999];\r\n\r\n            if (!Index.TryGetValue(Currency.GetHashCode(code, GetNamespaceIndex(@namespace)), out int index))\r\n            {\r\n                throw new InvalidCurrencyException($\"{code} is an unknown {@namespace} currency code!\");\r\n            }\r\n\r\n            return ref currencies[index];\r\n        }\r\n\r\n        /// <summary>Attempts to add the <see cref=\"Currency\"/> of the given code and namespace.</summary>\r\n        /// <param name=\"code\">A currency code, like EUR or USD.</param>\r\n        /// <param name=\"namespace\">A namespace, like ISO-4217.</param>\r\n        /// <param name=\"currency\">When this method returns, contains the <see cref=\"Currency\"/> that has the specified code and namespace, or the default value of the type if the operation failed.</param>\r\n        /// <returns><b>true</b> if the <see cref=\"Currency\"/> with the specified code is added; otherwise, <b>false</b>.</returns>\r\n        /// <exception cref=\"System.ArgumentNullException\">The value of 'code' or 'namespace' cannot be null or empty.</exception>\r\n        public static bool TryAdd(string code, string @namespace, Currency currency)\r\n        {\r\n            if (string.IsNullOrWhiteSpace(code))\r\n                throw new ArgumentNullException(nameof(code));\r\n            if (string.IsNullOrWhiteSpace(@namespace))\r\n                throw new ArgumentNullException(nameof(@namespace));\r\n\r\n            int nsIndex = GetOrAddNamespaceIndex(@namespace);\r\n\r\n            lock (changeLock)\r\n            {\r\n                int key = Currency.GetHashCode(code, nsIndex);\r\n                if (Index.ContainsKey(key))\r\n                {\r\n                    return false;\r\n                }\r\n\r\n                Debug.Assert(!currencies.Contains(currency), $\"{nameof(Index)} and {nameof(currencies)} array should be equally mapped so it exist in both or it doesn't exist in both!\");\r\n\r\n                // TryGetValue?\r\n                if (currencies.Length > short.MaxValue)\r\n                {\r\n                    throw new ArgumentOutOfRangeException(nameof(@namespace), $\"Can't add currency {code}! Maximum allowed currencies of {currencies.Length} is exceeded.\");\r\n                }\r\n\r\n                Array.Resize(ref currencies, currencies.Length + 1);\r\n\r\n                int index = currencies.Length - 1;\r\n                currencies[index] = currency;\r\n                Index.Add(key, index);\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        /// <summary>Attempts to remove the <see cref=\"Currency\"/> of the given code and namespace.</summary>\r\n        /// <param name=\"code\">A currency code, like EUR or USD.</param>\r\n        /// <param name=\"namespace\">A namespace, like ISO-4217.</param>\r\n        /// <param name=\"currency\">When this method returns, contains the <see cref=\"Currency\"/> that has the specified code and namespace, or the default value of the type if the operation failed.</param>\r\n        /// <returns><b>true</b> if the <see cref=\"Currency\"/> with the specified code is removed; otherwise, <b>false</b>.</returns>\r\n        /// <exception cref=\"System.ArgumentNullException\">The value of 'code' or 'namespace' cannot be null or empty.</exception>\r\n        public static bool TryRemove(string code, string @namespace, out Currency currency)\r\n        {\r\n            if (string.IsNullOrWhiteSpace(code))\r\n                throw new ArgumentNullException(nameof(code));\r\n            if (string.IsNullOrWhiteSpace(@namespace))\r\n                throw new ArgumentNullException(nameof(@namespace));\r\n\r\n            int nsIndex = GetOrAddNamespaceIndex(@namespace);\r\n\r\n            lock (changeLock)\r\n            {\r\n                int key = Currency.GetHashCode(code, nsIndex);\r\n                if (Index.ContainsKey(key))\r\n                {\r\n                    int index = Index[key];\r\n                    if (Index.Remove(key))\r\n                    {\r\n                        currency = currencies[index];\r\n\r\n                        // replace space with last currency in array and make the array smaller\r\n                        int lastIndex = currencies.Length - 1;\r\n                        if (index != lastIndex)\r\n                        {\r\n                            currencies[index] = currencies[lastIndex];\r\n                            Index[currencies[index].GetHashCode()] = index;\r\n                        }\r\n\r\n                        Array.Resize(ref currencies, currencies.Length - 1);\r\n\r\n                        Debug.Assert(!currencies.Contains(currency), $\"{nameof(Index)} and {nameof(currencies)} array should be equally mapped so it exist in both or it doesn't exist in both!\");\r\n\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            currency = default;\r\n            return false;\r\n        }\r\n\r\n        /// <summary>Get all registered currencies.</summary>\r\n        /// <returns>An <see cref=\"IEnumerable{Currency}\"/> of all registered currencies.</returns>\r\n        public static IEnumerable<Currency> GetAllCurrencies()\r\n        {\r\n            //return Currencies.Values.AsEnumerable();\r\n            return currencies.AsEnumerable();\r\n        }\r\n\r\n        internal static string GetNamespace(in int index)\r\n        {\r\n            return namespaces[index];\r\n        }\r\n\r\n        internal static int GetNamespaceIndex(in string @namespace)\r\n        {\r\n            for (var i = 0; i < namespaces.Length; i++)\r\n            {\r\n                if (namespaces[i] == @namespace)\r\n                    return i;\r\n            }\r\n\r\n            throw new ArgumentOutOfRangeException(nameof(@namespace), $\"Namespace {@namespace} is not found!\");\r\n        }\r\n\r\n        internal static int GetOrAddNamespaceIndex(in string @namespace)\r\n        {\r\n            // TODO: Can be optimized (max 256 entries)\r\n            for (var i = 0; i < namespaces.Length; i++)\r\n            {\r\n                if (namespaces[i] == @namespace)\r\n                    return (byte)i;\r\n            }\r\n\r\n            lock (changeLock)\r\n            {\r\n                // TODO: Namespaces.Contains(@namespace)\r\n                if (namespaces.Length > byte.MaxValue)\r\n                {\r\n                    throw new ArgumentOutOfRangeException(nameof(@namespace), $\"Can't add namespace {@namespace}! Maximum allowed namespaces of {namespaces.Length} is exceeded.\");\r\n                }\r\n\r\n                Array.Resize(ref namespaces, namespaces.Length + 1);\r\n                namespaces[namespaces.Length - 1] = @namespace;\r\n\r\n                return namespaces.Length - 1;\r\n            }\r\n        }\r\n\r\n        private static IDictionary<string, Currency> InitializeIsoCurrencies()\r\n        {\r\n            // TODO: Move to resource file.\r\n            return new Dictionary<string, Currency>\r\n            {\r\n                // ISO-4217 currencies (list one)\r\n                [\"ISO-4217::AED\"] = new Currency(\"AED\", 784, 2, \"United Arab Emirates dirham\", \"د.إ\"),\r\n                [\"ISO-4217::AFN\"] = new Currency(\"AFN\", 971, 2, \"Afghan afghani\", \"؋\"),\r\n                [\"ISO-4217::ALL\"] = new Currency(\"ALL\", 008, 2, \"Albanian lek\", \"L\"),\r\n                [\"ISO-4217::AMD\"] = new Currency(\"AMD\", 051, 2, \"Armenian dram\", \"֏\"),\r\n                [\"ISO-4217::ANG\"] = new Currency(\"ANG\", 532, 2, \"Netherlands Antillean guilder\", \"ƒ\"),\r\n                [\"ISO-4217::AOA\"] = new Currency(\"AOA\", 973, 2, \"Angolan kwanza\", \"Kz\"),\r\n                [\"ISO-4217::ARS\"] = new Currency(\"ARS\", 032, 2, \"Argentine peso\", \"$\"),\r\n                [\"ISO-4217::AUD\"] = new Currency(\"AUD\", 036, 2, \"Australian dollar\", \"$\"),\r\n                [\"ISO-4217::AWG\"] = new Currency(\"AWG\", 533, 2, \"Aruban florin\", \"ƒ\"),\r\n                [\"ISO-4217::AZN\"] = new Currency(\"AZN\", 944, 2, \"Azerbaijan Manat\", \"ман\"), // AZERBAIJAN\r\n                [\"ISO-4217::BAM\"] = new Currency(\"BAM\", 977, 2, \"Bosnia and Herzegovina convertible mark\", \"KM\"),\r\n                [\"ISO-4217::BBD\"] = new Currency(\"BBD\", 052, 2, \"Barbados dollar\", \"$\"),\r\n                [\"ISO-4217::BDT\"] = new Currency(\"BDT\", 050, 2, \"Bangladeshi taka\", \"৳\"), // or Tk\r\n                [\"ISO-4217::BGN\"] = new Currency(\"BGN\", 975, 2, \"Bulgarian lev\", \"лв.\"),\r\n                [\"ISO-4217::BHD\"] = new Currency(\"BHD\", 048, 3, \"Bahraini dinar\", \"BD\"), // or د.ب. (switched for unit tests to work)\r\n                [\"ISO-4217::BIF\"] = new Currency(\"BIF\", 108, 0, \"Burundian franc\", \"FBu\"),\r\n                [\"ISO-4217::BMD\"] = new Currency(\"BMD\", 060, 2, \"Bermudian dollar\", \"$\"),\r\n                [\"ISO-4217::BND\"] = new Currency(\"BND\", 096, 2, \"Brunei dollar\", \"$\"), // or B$\r\n                [\"ISO-4217::BOB\"] = new Currency(\"BOB\", 068, 2, \"Boliviano\", \"Bs.\"), // or BS or $b\r\n                [\"ISO-4217::BOV\"] = new Currency(\"BOV\", 984, 2, \"Bolivian Mvdol (funds code)\", Currency.GenericCurrencySign), // <==== not found\r\n                [\"ISO-4217::BRL\"] = new Currency(\"BRL\", 986, 2, \"Brazilian real\", \"R$\"),\r\n                [\"ISO-4217::BSD\"] = new Currency(\"BSD\", 044, 2, \"Bahamian dollar\", \"$\"),\r\n                [\"ISO-4217::BTN\"] = new Currency(\"BTN\", 064, 2, \"Bhutanese ngultrum\", \"Nu.\"),\r\n                [\"ISO-4217::BWP\"] = new Currency(\"BWP\", 072, 2, \"Botswana pula\", \"P\"),\r\n                [\"ISO-4217::BYN\"] = new Currency(\"BYN\", 933, 2, \"Belarusian ruble\", \"Br\", validFrom: new DateTime(2006, 06, 01)),\r\n                [\"ISO-4217::BZD\"] = new Currency(\"BZD\", 084, 2, \"Belize dollar\", \"BZ$\"),\r\n                [\"ISO-4217::CAD\"] = new Currency(\"CAD\", 124, 2, \"Canadian dollar\", \"$\"),\r\n                [\"ISO-4217::CDF\"] = new Currency(\"CDF\", 976, 2, \"Congolese franc\", \"FC\"),\r\n                [\"ISO-4217::CHE\"] = new Currency(\"CHE\", 947, 2, \"WIR Euro (complementary currency)\", \"CHE\"),\r\n                [\"ISO-4217::CHF\"] = new Currency(\"CHF\", 756, 2, \"Swiss franc\", \"fr.\"), // or CHF\r\n                [\"ISO-4217::CHW\"] = new Currency(\"CHW\", 948, 2, \"WIR Franc (complementary currency)\", \"CHW\"),\r\n                [\"ISO-4217::CLF\"] = new Currency(\"CLF\", 990, 4, \"Unidad de Fomento (funds code)\", \"CLF\"),\r\n                [\"ISO-4217::CLP\"] = new Currency(\"CLP\", 152, 0, \"Chilean peso\", \"$\"),\r\n                [\"ISO-4217::CNY\"] = new Currency(\"CNY\", 156, 2, \"Chinese yuan\", \"¥\"),\r\n                [\"ISO-4217::COP\"] = new Currency(\"COP\", 170, 2, \"Colombian peso\", \"$\"),\r\n                [\"ISO-4217::COU\"] = new Currency(\"COU\", 970, 2, \"Unidad de Valor Real\", Currency.GenericCurrencySign), // ???\r\n                [\"ISO-4217::CRC\"] = new Currency(\"CRC\", 188, 2, \"Costa Rican colon\", \"₡\"),\r\n                [\"ISO-4217::CUC\"] = new Currency(\"CUC\", 931, 2, \"Cuban convertible peso\", \"CUC$\"), // $ or CUC\r\n                [\"ISO-4217::CUP\"] = new Currency(\"CUP\", 192, 2, \"Cuban peso\", \"$\"), // or ₱ (obsolete?)\r\n                [\"ISO-4217::CVE\"] = new Currency(\"CVE\", 132, 2, \"Cape Verde escudo\", \"$\"),\r\n                [\"ISO-4217::CZK\"] = new Currency(\"CZK\", 203, 2, \"Czech koruna\", \"Kč\"),\r\n                [\"ISO-4217::DJF\"] = new Currency(\"DJF\", 262, 0, \"Djiboutian franc\", \"Fdj\"),\r\n                [\"ISO-4217::DKK\"] = new Currency(\"DKK\", 208, 2, \"Danish krone\", \"kr.\"),\r\n                [\"ISO-4217::DOP\"] = new Currency(\"DOP\", 214, 2, \"Dominican peso\", \"RD$\"), // or $\r\n                [\"ISO-4217::DZD\"] = new Currency(\"DZD\", 012, 2, \"Algerian dinar\", \"DA\"), // (Latin) or د.ج (Arabic)\r\n                [\"ISO-4217::EGP\"] = new Currency(\"EGP\", 818, 2, \"Egyptian pound\", \"LE\"), // or E£ or ج.م (Arabic)\r\n                [\"ISO-4217::ERN\"] = new Currency(\"ERN\", 232, 2, \"Eritrean nakfa\", \"ERN\"),\r\n                [\"ISO-4217::ETB\"] = new Currency(\"ETB\", 230, 2, \"Ethiopian birr\", \"Br\"), // (Latin) or ብር (Ethiopic)\r\n                [\"ISO-4217::EUR\"] = new Currency(\"EUR\", 978, 2, \"Euro\", \"€\"),\r\n                [\"ISO-4217::FJD\"] = new Currency(\"FJD\", 242, 2, \"Fiji dollar\", \"$\"), // or FJ$\r\n                [\"ISO-4217::FKP\"] = new Currency(\"FKP\", 238, 2, \"Falkland Islands pound\", \"£\"),\r\n                [\"ISO-4217::GBP\"] = new Currency(\"GBP\", 826, 2, \"Pound sterling\", \"£\"),\r\n                [\"ISO-4217::GEL\"] = new Currency(\"GEL\", 981, 2, \"Georgian lari\", \"ლ.\"), // TODO: new symbol since July 18, 2014 => see http://en.wikipedia.org/wiki/Georgian_lari\r\n                [\"ISO-4217::GHS\"] = new Currency(\"GHS\", 936, 2, \"Ghanaian cedi\", \"GH¢\"), // or GH₵\r\n                [\"ISO-4217::GIP\"] = new Currency(\"GIP\", 292, 2, \"Gibraltar pound\", \"£\"),\r\n                [\"ISO-4217::GMD\"] = new Currency(\"GMD\", 270, 2, \"Gambian dalasi\", \"D\"),\r\n                [\"ISO-4217::GNF\"] = new Currency(\"GNF\", 324, 0, \"Guinean Franc\", \"FG\"), // (possibly also Fr or GFr)  GUINEA\r\n                [\"ISO-4217::GTQ\"] = new Currency(\"GTQ\", 320, 2, \"Guatemalan quetzal\", \"Q\"),\r\n                [\"ISO-4217::GYD\"] = new Currency(\"GYD\", 328, 2, \"Guyanese dollar\", \"$\"), // or G$\r\n                [\"ISO-4217::HKD\"] = new Currency(\"HKD\", 344, 2, \"Hong Kong dollar\", \"HK$\"), // or $\r\n                [\"ISO-4217::HNL\"] = new Currency(\"HNL\", 340, 2, \"Honduran lempira\", \"L\"),\r\n                [\"ISO-4217::HRK\"] = new Currency(\"HRK\", 191, 2, \"Croatian kuna\", \"kn\"),\r\n                [\"ISO-4217::HTG\"] = new Currency(\"HTG\", 332, 2, \"Haitian gourde\", \"G\"),\r\n                [\"ISO-4217::HUF\"] = new Currency(\"HUF\", 348, 2, \"Hungarian forint\", \"Ft\"),\r\n                [\"ISO-4217::IDR\"] = new Currency(\"IDR\", 360, 2, \"Indonesian rupiah\", \"Rp\"),\r\n                [\"ISO-4217::ILS\"] = new Currency(\"ILS\", 376, 2, \"Israeli new shekel\", \"₪\"),\r\n                [\"ISO-4217::INR\"] = new Currency(\"INR\", 356, 2, \"Indian rupee\", \"₹\"),\r\n                [\"ISO-4217::IQD\"] = new Currency(\"IQD\", 368, 3, \"Iraqi dinar\", \"د.ع\"),\r\n                [\"ISO-4217::IRR\"] = new Currency(\"IRR\", 364, 2, \"Iranian rial\", \"ريال\"),\r\n                [\"ISO-4217::ISK\"] = new Currency(\"ISK\", 352, 0, \"Icelandic króna\", \"kr\"),\r\n                [\"ISO-4217::JMD\"] = new Currency(\"JMD\", 388, 2, \"Jamaican dollar\", \"J$\"), // or $\r\n                [\"ISO-4217::JOD\"] = new Currency(\"JOD\", 400, 3, \"Jordanian dinar\", \"د.ا.\u200F\"),\r\n                [\"ISO-4217::JPY\"] = new Currency(\"JPY\", 392, 0, \"Japanese yen\", \"¥\"),\r\n                [\"ISO-4217::KES\"] = new Currency(\"KES\", 404, 2, \"Kenyan shilling\", \"KSh\"),\r\n                [\"ISO-4217::KGS\"] = new Currency(\"KGS\", 417, 2, \"Kyrgyzstani som\", \"сом\"),\r\n                [\"ISO-4217::KHR\"] = new Currency(\"KHR\", 116, 2, \"Cambodian riel\", \"៛\"),\r\n                [\"ISO-4217::KMF\"] = new Currency(\"KMF\", 174, 0, \"Comorian Franc\", \"CF\"), // COMOROS (THE)\r\n                [\"ISO-4217::KPW\"] = new Currency(\"KPW\", 408, 2, \"North Korean won\", \"₩\"),\r\n                [\"ISO-4217::KRW\"] = new Currency(\"KRW\", 410, 0, \"South Korean won\", \"₩\"),\r\n                [\"ISO-4217::KWD\"] = new Currency(\"KWD\", 414, 3, \"Kuwaiti dinar\", \"د.ك\"), // or K.D.\r\n                [\"ISO-4217::KYD\"] = new Currency(\"KYD\", 136, 2, \"Cayman Islands dollar\", \"$\"),\r\n                [\"ISO-4217::KZT\"] = new Currency(\"KZT\", 398, 2, \"Kazakhstani tenge\", \"₸\"),\r\n                [\"ISO-4217::LAK\"] = new Currency(\"LAK\", 418, 2, \"Lao Kip\", \"₭\"), // or ₭N,  LAO PEOPLE’S DEMOCRATIC REPUBLIC(THE), ISO says minor unit=2 but wiki says Historically, one kip was divided into 100 att (ອັດ).\r\n                [\"ISO-4217::LBP\"] = new Currency(\"LBP\", 422, 2, \"Lebanese pound\", \"ل.ل\"),\r\n                [\"ISO-4217::LKR\"] = new Currency(\"LKR\", 144, 2, \"Sri Lankan rupee\", \"Rs\"), // or රු\r\n                [\"ISO-4217::LRD\"] = new Currency(\"LRD\", 430, 2, \"Liberian dollar\", \"$\"), // or L$, LD$\r\n                [\"ISO-4217::LSL\"] = new Currency(\"LSL\", 426, 2, \"Lesotho loti\", \"L\"), // L or M (pl.)\r\n                [\"ISO-4217::LYD\"] = new Currency(\"LYD\", 434, 3, \"Libyan dinar\", \"ل.د\"), // or LD\r\n                [\"ISO-4217::MAD\"] = new Currency(\"MAD\", 504, 2, \"Moroccan dirham\", \"د.م.\"),\r\n                [\"ISO-4217::MDL\"] = new Currency(\"MDL\", 498, 2, \"Moldovan leu\", \"L\"),\r\n                [\"ISO-4217::MGA\"] = new Currency(\"MGA\", 969, Z07Byte, \"Malagasy ariary\", \"Ar\"),  // divided into five subunits rather than by a power of ten. 5 is 10 to the power of 0.69897...\r\n                [\"ISO-4217::MKD\"] = new Currency(\"MKD\", 807, 2, \"Macedonian denar\", \"ден\"),\r\n                [\"ISO-4217::MMK\"] = new Currency(\"MMK\", 104, 2, \"Myanma kyat\", \"K\"),\r\n                [\"ISO-4217::MNT\"] = new Currency(\"MNT\", 496, 2, \"Mongolian tugrik\", \"₮\"),\r\n                [\"ISO-4217::MOP\"] = new Currency(\"MOP\", 446, 2, \"Macanese pataca\", \"MOP$\"),\r\n                [\"ISO-4217::MRU\"] = new Currency(\"MRU\", 929, Z07Byte, \"Mauritanian ouguiya\", \"UM\", validFrom: new DateTime(2018, 01, 01)), // divided into five subunits rather than by a power of ten. 5 is 10 to the power of 0.69897...\r\n                [\"ISO-4217::MUR\"] = new Currency(\"MUR\", 480, 2, \"Mauritian rupee\", \"Rs\"),\r\n                [\"ISO-4217::MVR\"] = new Currency(\"MVR\", 462, 2, \"Maldivian rufiyaa\", \"Rf\"), // or , MRf, MVR, .ރ or /-\r\n                [\"ISO-4217::MWK\"] = new Currency(\"MWK\", 454, 2, \"Malawi kwacha\", \"MK\"),\r\n                [\"ISO-4217::MXN\"] = new Currency(\"MXN\", 484, 2, \"Mexican peso\", \"$\"),\r\n                [\"ISO-4217::MXV\"] = new Currency(\"MXV\", 979, 2, \"Mexican Unidad de Inversion (UDI) (funds code)\", Currency.GenericCurrencySign),  // <==== not found\r\n                [\"ISO-4217::MYR\"] = new Currency(\"MYR\", 458, 2, \"Malaysian ringgit\", \"RM\"),\r\n                [\"ISO-4217::MZN\"] = new Currency(\"MZN\", 943, 2, \"Mozambican metical\", \"MTn\"), // or MTN\r\n                [\"ISO-4217::NAD\"] = new Currency(\"NAD\", 516, 2, \"Namibian dollar\", \"N$\"), // or $\r\n                [\"ISO-4217::NGN\"] = new Currency(\"NGN\", 566, 2, \"Nigerian naira\", \"₦\"),\r\n                [\"ISO-4217::NIO\"] = new Currency(\"NIO\", 558, 2, \"Nicaraguan córdoba\", \"C$\"),\r\n                [\"ISO-4217::NOK\"] = new Currency(\"NOK\", 578, 2, \"Norwegian krone\", \"kr\"),\r\n                [\"ISO-4217::NPR\"] = new Currency(\"NPR\", 524, 2, \"Nepalese rupee\", \"Rs\"), // or ₨ or रू\r\n                [\"ISO-4217::NZD\"] = new Currency(\"NZD\", 554, 2, \"New Zealand dollar\", \"$\"),\r\n                [\"ISO-4217::OMR\"] = new Currency(\"OMR\", 512, 3, \"Omani rial\", \"ر.ع.\"),\r\n                [\"ISO-4217::PAB\"] = new Currency(\"PAB\", 590, 2, \"Panamanian balboa\", \"B/.\"),\r\n                [\"ISO-4217::PEN\"] = new Currency(\"PEN\", 604, 2, \"Peruvian sol\", \"S/.\"),\r\n                [\"ISO-4217::PGK\"] = new Currency(\"PGK\", 598, 2, \"Papua New Guinean kina\", \"K\"),\r\n                [\"ISO-4217::PHP\"] = new Currency(\"PHP\", 608, 2, \"Philippine Peso\", \"₱\"), // or P or PHP or PhP\r\n                [\"ISO-4217::PKR\"] = new Currency(\"PKR\", 586, 2, \"Pakistani rupee\", \"Rs\"),\r\n                [\"ISO-4217::PLN\"] = new Currency(\"PLN\", 985, 2, \"Polish złoty\", \"zł\"),\r\n                [\"ISO-4217::PYG\"] = new Currency(\"PYG\", 600, 0, \"Paraguayan guaraní\", \"₲\"),\r\n                [\"ISO-4217::QAR\"] = new Currency(\"QAR\", 634, 2, \"Qatari riyal\", \"ر.ق\"), // or QR\r\n                [\"ISO-4217::RON\"] = new Currency(\"RON\", 946, 2, \"Romanian new leu\", \"lei\"),\r\n                [\"ISO-4217::RSD\"] = new Currency(\"RSD\", 941, 2, \"Serbian dinar\", \"РСД\"), // or RSD (or дин or d./д)\r\n                [\"ISO-4217::RUB\"] = new Currency(\"RUB\", 643, 2, \"Russian rouble\", \"₽\"), // or R or руб (both onofficial)\r\n                [\"ISO-4217::RWF\"] = new Currency(\"RWF\", 646, 0, \"Rwandan franc\", \"RFw\"), // or RF, R₣\r\n                [\"ISO-4217::SAR\"] = new Currency(\"SAR\", 682, 2, \"Saudi riyal\", \"ر.س\"), // or SR (Latin) or ﷼\u200E (Unicode)\r\n                [\"ISO-4217::SBD\"] = new Currency(\"SBD\", 090, 2, \"Solomon Islands dollar\", \"SI$\"),\r\n                [\"ISO-4217::SCR\"] = new Currency(\"SCR\", 690, 2, \"Seychelles rupee\", \"SR\"), // or SRe\r\n                [\"ISO-4217::SDG\"] = new Currency(\"SDG\", 938, 2, \"Sudanese pound\", \"ج.س.\"),\r\n                [\"ISO-4217::SEK\"] = new Currency(\"SEK\", 752, 2, \"Swedish krona/kronor\", \"kr\"),\r\n                [\"ISO-4217::SGD\"] = new Currency(\"SGD\", 702, 2, \"Singapore dollar\", \"S$\"), // or $\r\n                [\"ISO-4217::SHP\"] = new Currency(\"SHP\", 654, 2, \"Saint Helena pound\", \"£\"),\r\n                [\"ISO-4217::SLL\"] = new Currency(\"SLL\", 694, 2, \"Sierra Leonean leone\", \"Le\"),\r\n                [\"ISO-4217::SOS\"] = new Currency(\"SOS\", 706, 2, \"Somali shilling\", \"S\"), // or Sh.So.\r\n                [\"ISO-4217::SRD\"] = new Currency(\"SRD\", 968, 2, \"Surinamese dollar\", \"$\"),\r\n                [\"ISO-4217::SSP\"] = new Currency(\"SSP\", 728, 2, \"South Sudanese pound\", \"£\"), // not sure about symbol...\r\n                [\"ISO-4217::SVC\"] = new Currency(\"SVC\", 222, 2, \"El Salvador Colon\", \"₡\"),\r\n                [\"ISO-4217::SYP\"] = new Currency(\"SYP\", 760, 2, \"Syrian pound\", \"ܠ.ܣ.\u200F\"), // or LS or £S (or £)\r\n                [\"ISO-4217::SZL\"] = new Currency(\"SZL\", 748, 2, \"Swazi lilangeni\", \"L\"), // or E (plural)\r\n                [\"ISO-4217::THB\"] = new Currency(\"THB\", 764, 2, \"Thai baht\", \"฿\"),\r\n                [\"ISO-4217::TJS\"] = new Currency(\"TJS\", 972, 2, \"Tajikistani somoni\", \"смн\"),\r\n                [\"ISO-4217::TMT\"] = new Currency(\"TMT\", 934, 2, \"Turkmenistani manat\", \"m\"), // or T?\r\n                [\"ISO-4217::TND\"] = new Currency(\"TND\", 788, 3, \"Tunisian dinar\", \"د.ت\"), // or DT (Latin)\r\n                [\"ISO-4217::TOP\"] = new Currency(\"TOP\", 776, 2, \"Tongan paʻanga\", \"T$\"), // (sometimes PT)\r\n                [\"ISO-4217::TRY\"] = new Currency(\"TRY\", 949, 2, \"Turkish lira\", \"₺\"),\r\n                [\"ISO-4217::TTD\"] = new Currency(\"TTD\", 780, 2, \"Trinidad and Tobago dollar\", \"$\"), // or TT$\r\n                [\"ISO-4217::TWD\"] = new Currency(\"TWD\", 901, 2, \"New Taiwan dollar\", \"NT$\"), // or $\r\n                [\"ISO-4217::TZS\"] = new Currency(\"TZS\", 834, 2, \"Tanzanian shilling\", \"x/y\"), // or TSh\r\n                [\"ISO-4217::UAH\"] = new Currency(\"UAH\", 980, 2, \"Ukrainian hryvnia\", \"₴\"),\r\n                [\"ISO-4217::UGX\"] = new Currency(\"UGX\", 800, 0, \"Ugandan shilling\", \"USh\"),\r\n                [\"ISO-4217::USD\"] = new Currency(\"USD\", 840, 2, \"United States dollar\", \"$\"), // or US$\r\n                [\"ISO-4217::USN\"] = new Currency(\"USN\", 997, 2, \"United States dollar (next day) (funds code)\", \"$\"),\r\n                [\"ISO-4217::UYI\"] = new Currency(\"UYI\", 940, 0, \"Uruguay Peso en Unidades Indexadas (UI) (funds code)\", Currency.GenericCurrencySign), // List two\r\n                [\"ISO-4217::UYU\"] = new Currency(\"UYU\", 858, 2, \"Uruguayan peso\", \"$\"), // or $U\r\n                [\"ISO-4217::UZS\"] = new Currency(\"UZS\", 860, 2, \"Uzbekistan som\", \"лв\"), // or сўм ?\r\n                [\"ISO-4217::VES\"] = new Currency(\"VES\", 928, 2, \"Venezuelan Bolívar Soberano\", \"Bs.\", validFrom: new DateTime(2018, 8, 20)), // or Bs.F. , Amendment 167 talks about delay but from multiple sources on the web the date seems to be 20 aug.\r\n                [\"ISO-4217::VND\"] = new Currency(\"VND\", 704, 0, \"Vietnamese dong\", \"₫\"),\r\n                [\"ISO-4217::VUV\"] = new Currency(\"VUV\", 548, 0, \"Vanuatu vatu\", \"VT\"),\r\n                [\"ISO-4217::WST\"] = new Currency(\"WST\", 882, 2, \"Samoan tala\", \"WS$\"), // sometimes SAT, ST or T\r\n                [\"ISO-4217::XAF\"] = new Currency(\"XAF\", 950, 0, \"CFA franc BEAC\", \"FCFA\"),\r\n                [\"ISO-4217::XAG\"] = new Currency(\"XAG\", 961, NotApplicableByte, \"Silver (one troy ounce)\", Currency.GenericCurrencySign),\r\n                [\"ISO-4217::XAU\"] = new Currency(\"XAU\", 959, NotApplicableByte, \"Gold (one troy ounce)\", Currency.GenericCurrencySign),\r\n                [\"ISO-4217::XBA\"] = new Currency(\"XBA\", 955, NotApplicableByte, \"European Composite Unit (EURCO) (bond market unit)\", Currency.GenericCurrencySign),\r\n                [\"ISO-4217::XBB\"] = new Currency(\"XBB\", 956, NotApplicableByte, \"European Monetary Unit (E.M.U.-6) (bond market unit)\", Currency.GenericCurrencySign),\r\n                [\"ISO-4217::XBC\"] = new Currency(\"XBC\", 957, NotApplicableByte, \"European Unit of Account 9 (E.U.A.-9) (bond market unit)\", Currency.GenericCurrencySign),\r\n                [\"ISO-4217::XBD\"] = new Currency(\"XBD\", 958, NotApplicableByte, \"European Unit of Account 17 (E.U.A.-17) (bond market unit)\", Currency.GenericCurrencySign),\r\n                [\"ISO-4217::XCD\"] = new Currency(\"XCD\", 951, 2, \"East Caribbean dollar\", \"$\"), // or EC$\r\n                [\"ISO-4217::XDR\"] = new Currency(\"XDR\", 960, NotApplicableByte, \"Special drawing rights\", Currency.GenericCurrencySign),\r\n                [\"ISO-4217::XOF\"] = new Currency(\"XOF\", 952, 0, \"CFA franc BCEAO\", \"CFA\"),\r\n                [\"ISO-4217::XPD\"] = new Currency(\"XPD\", 964, NotApplicableByte, \"Palladium (one troy ounce)\", Currency.GenericCurrencySign),\r\n                [\"ISO-4217::XPF\"] = new Currency(\"XPF\", 953, 0, \"CFP franc\", \"F\"),\r\n                [\"ISO-4217::XPT\"] = new Currency(\"XPT\", 962, NotApplicableByte, \"Platinum (one troy ounce)\", Currency.GenericCurrencySign),\r\n                [\"ISO-4217::XSU\"] = new Currency(\"XSU\", 994, NotApplicableByte, \"SUCRE\", Currency.GenericCurrencySign),\r\n                [\"ISO-4217::XTS\"] = new Currency(\"XTS\", 963, NotApplicableByte, \"Code reserved for testing purposes\", Currency.GenericCurrencySign),\r\n                [\"ISO-4217::XUA\"] = new Currency(\"XUA\", 965, NotApplicableByte, \"ADB Unit of Account\", Currency.GenericCurrencySign),\r\n                [\"ISO-4217::XXX\"] = new Currency(\"XXX\", 999, NotApplicableByte, \"No currency\", Currency.GenericCurrencySign),\r\n                [\"ISO-4217::YER\"] = new Currency(\"YER\", 886, 2, \"Yemeni rial\", \"﷼\"), // or ر.ي.\u200F\u200F ?\r\n                [\"ISO-4217::ZAR\"] = new Currency(\"ZAR\", 710, 2, \"South African rand\", \"R\"),\r\n                [\"ISO-4217::ZMW\"] = new Currency(\"ZMW\", 967, 2, \"Zambian kwacha\", \"ZK\"), // or ZMW\r\n                [\"ISO-4217::ZWL\"] = new Currency(\"ZWL\", 932, 2, \"Zimbabwean dollar\", \"$\"),\r\n                [\"ISO-4217::STN\"] = new Currency(\"STN\", 930, 2, \"Dobra\", \"Db\", validFrom: new DateTime(2018, 1, 1)), // New Currency of São Tomé and Príncipe from 1 Jan 2018 (Amendment 164)\r\n                [\"ISO-4217::STD\"] = new Currency(\"STD\", 678, 2, \"Dobra\", \"Db\", validTo: new DateTime(2018, 1, 1)), // To be replaced Currency of São Tomé and Príncipe from 1 Jan 2018 (Amendment 164),  inflation has rendered the cêntimo obsolete\r\n                [\"ISO-4217::UYW\"] = new Currency(\"UYW\", 927, 4, \"Unidad Previsional\", \"Db\", validFrom: new DateTime(2018, 8, 29)), // The Central Bank of Uruguay is applying for new Fund currency code (Amendment 169)\r\n\r\n                // Historic ISO-4217 currencies (list three)\r\n                [\"ISO-4217-HISTORIC::BYR\"] = new Currency(\"BYR\", 974, 0, \"Belarusian ruble\", \"Br\", Iso4217Historic, validTo: new DateTime(2016, 12, 31), validFrom: new DateTime(2000, 01, 01)),\r\n                [\"ISO-4217-HISTORIC::VEF\"] = new Currency(\"VEF\", 937, 2, \"Venezuelan bolívar\", \"Bs.\", Iso4217Historic, new DateTime(2018, 8, 20)), // replaced by VEF, The conversion rate is 1000 (old) Bolívar to 1 (new) Bolívar Soberano (1000:1). The expiration date of the current bolívar will be defined later and communicated by the Central Bank of Venezuela in due time.\r\n                [\"ISO-4217-HISTORIC::MRO\"] = new Currency(\"MRO\", 478, Z07Byte, \"Mauritanian ouguiya\", \"UM\", Iso4217Historic, new DateTime(2018, 1, 1)), // replaced by MRU\r\n                [\"ISO-4217-HISTORIC::ESA\"] = new Currency(\"ESA\", 996, NotApplicableByte, \"Spanish peseta (account A)\", \"Pta\", Iso4217Historic, new DateTime(2002, 3, 1)), // replaced by ESP (EUR)\r\n                [\"ISO-4217-HISTORIC::ESB\"] = new Currency(\"ESB\", 995, NotApplicableByte, \"Spanish peseta (account B)\", \"Pta\", Iso4217Historic, new DateTime(2002, 3, 1)), // replaced by ESP (EUR)\r\n                [\"ISO-4217-HISTORIC::LTL\"] = new Currency(\"LTL\", 440, 2, \"Lithuanian litas\", \"Lt\", Iso4217Historic, new DateTime(2014, 12, 31), new DateTime(1993, 1, 1)), // replaced by EUR\r\n                [\"ISO-4217-HISTORIC::USS\"] = new Currency(\"USS\", 998, 2, \"United States dollar (same day) (funds code)\", \"$\", Iso4217Historic, new DateTime(2014, 3, 28)), // replaced by (no successor)\r\n                [\"ISO-4217-HISTORIC::LVL\"] = new Currency(\"LVL\", 428, 2, \"Latvian lats\", \"Ls\", Iso4217Historic, new DateTime(2013, 12, 31), new DateTime(1992, 1, 1)), // replaced by EUR\r\n                [\"ISO-4217-HISTORIC::XFU\"] = new Currency(\"XFU\",   0, NotApplicableByte, \"UIC franc (special settlement currency) International Union of Railways\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2013, 11, 7)), // replaced by EUR\r\n                [\"ISO-4217-HISTORIC::ZMK\"] = new Currency(\"ZMK\", 894, 2, \"Zambian kwacha\", \"ZK\", Iso4217Historic, new DateTime(2013, 1, 1), new DateTime(1968, 1, 16)), // replaced by ZMW\r\n                [\"ISO-4217-HISTORIC::EEK\"] = new Currency(\"EEK\", 233, 2, \"Estonian kroon\", \"kr\", Iso4217Historic, new DateTime(2010, 12, 31), new DateTime(1992, 1, 1)), // replaced by EUR\r\n                [\"ISO-4217-HISTORIC::ZWR\"] = new Currency(\"ZWR\", 935, 2, \"Zimbabwean dollar A/09\", \"$\", Iso4217Historic, new DateTime(2009, 2, 2), new DateTime(2008, 8, 1)), // replaced by ZWL\r\n                [\"ISO-4217-HISTORIC::SKK\"] = new Currency(\"SKK\", 703, 2, \"Slovak koruna\", \"Sk\", Iso4217Historic, new DateTime(2008, 12, 31), new DateTime(1993, 2, 8)), // replaced by EUR\r\n                [\"ISO-4217-HISTORIC::TMM\"] = new Currency(\"TMM\", 795, 0, \"Turkmenistani manat\", \"T\", Iso4217Historic, new DateTime(2008, 12, 31), new DateTime(1993, 11, 1)), // replaced by TMT\r\n                [\"ISO-4217-HISTORIC::ZWN\"] = new Currency(\"ZWN\", 942, 2, \"Zimbabwean dollar A/08\", \"$\", Iso4217Historic, new DateTime(2008, 7, 31), new DateTime(2006, 8, 1)), // replaced by ZWR\r\n                [\"ISO-4217-HISTORIC::VEB\"] = new Currency(\"VEB\", 862, 2, \"Venezuelan bolívar\", \"Bs.\", Iso4217Historic, new DateTime(2008, 1, 1)), // replaced by VEF\r\n                [\"ISO-4217-HISTORIC::CYP\"] = new Currency(\"CYP\", 196, 2, \"Cypriot pound\", \"£\", Iso4217Historic, new DateTime(2007, 12, 31), new DateTime(1879, 1, 1)), // replaced by EUR\r\n                [\"ISO-4217-HISTORIC::MTL\"] = new Currency(\"MTL\", 470, 2, \"Maltese lira\", \"₤\", Iso4217Historic, new DateTime(2007, 12, 31), new DateTime(1972, 1, 1)), // replaced by EUR\r\n                [\"ISO-4217-HISTORIC::GHC\"] = new Currency(\"GHC\", 288, 0, \"Ghanaian cedi\", \"GH₵\", Iso4217Historic, new DateTime(2007, 7, 1), new DateTime(1967, 1, 1)), // replaced by GHS\r\n                [\"ISO-4217-HISTORIC::SDD\"] = new Currency(\"SDD\", 736, NotApplicableByte, \"Sudanese dinar\", \"£Sd\", Iso4217Historic, new DateTime(2007, 1, 10), new DateTime(1992, 6, 8)), // replaced by SDG\r\n                [\"ISO-4217-HISTORIC::SIT\"] = new Currency(\"SIT\", 705, 2, \"Slovenian tolar\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2006, 12, 31), new DateTime(1991, 10, 8)), // replaced by EUR\r\n                [\"ISO-4217-HISTORIC::ZWD\"] = new Currency(\"ZWD\", 716, 2, \"Zimbabwean dollar A/06\", \"$\", Iso4217Historic, new DateTime(2006, 7, 31), new DateTime(1980, 4, 18)), // replaced by ZWN\r\n                [\"ISO-4217-HISTORIC::MZM\"] = new Currency(\"MZM\", 508, 0, \"Mozambican metical\", \"MT\", Iso4217Historic, new DateTime(2006, 6, 30), new DateTime(1980, 1, 1)), // replaced by MZN\r\n                [\"ISO-4217-HISTORIC::AZM\"] = new Currency(\"AZM\", 031, 0, \"Azerbaijani manat\", \"₼\", Iso4217Historic, new DateTime(2006, 1, 1), new DateTime(1992, 8, 15)), // replaced by AZN\r\n                [\"ISO-4217-HISTORIC::CSD\"] = new Currency(\"CSD\", 891, 2, \"Serbian dinar\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2006, 12, 31), new DateTime(2003, 7, 3)), // replaced by RSD\r\n                [\"ISO-4217-HISTORIC::MGF\"] = new Currency(\"MGF\", 450, 2, \"Malagasy franc\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2005, 1, 1), new DateTime(1963, 7, 1)), // replaced by MGA\r\n                [\"ISO-4217-HISTORIC::ROL\"] = new Currency(\"ROL\", 642, NotApplicableByte, \"Romanian leu A/05\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2005, 12, 31), new DateTime(1952, 1, 28)), // replaced by RON\r\n                [\"ISO-4217-HISTORIC::TRL\"] = new Currency(\"TRL\", 792, 0, \"Turkish lira A/05\", \"₺\", Iso4217Historic, new DateTime(2005, 12, 31)), // replaced by TRY\r\n                [\"ISO-4217-HISTORIC::SRG\"] = new Currency(\"SRG\", 740, NotApplicableByte, \"Suriname guilder\", \"ƒ\", Iso4217Historic, new DateTime(2004, 12, 31)), // replaced by SRD\r\n                [\"ISO-4217-HISTORIC::YUM\"] = new Currency(\"YUM\", 891, 2, \"Yugoslav dinar\", \"дин.\", Iso4217Historic, new DateTime(2003, 7, 2), new DateTime(1994, 1, 24)), // replaced by CSD\r\n                [\"ISO-4217-HISTORIC::AFA\"] = new Currency(\"AFA\", 004, NotApplicableByte, \"Afghan afghani\", \"؋\", Iso4217Historic, new DateTime(2003, 12, 31), new DateTime(1925, 1, 1)), // replaced by AFN\r\n                [\"ISO-4217-HISTORIC::XFO\"] = new Currency(\"XFO\",   0, NotApplicableByte, \"Gold franc (special settlement currency)\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2003, 12, 31), new DateTime(1803, 1, 1)), // replaced by XDR\r\n                [\"ISO-4217-HISTORIC::GRD\"] = new Currency(\"GRD\", 300, 2, \"Greek drachma\", \"₯\", Iso4217Historic, new DateTime(2000, 12, 31), new DateTime(1954, 1, 1)), // replaced by EUR\r\n                [\"ISO-4217-HISTORIC::TJR\"] = new Currency(\"TJR\", 762, NotApplicableByte, \"Tajikistani ruble\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2000, 10, 30), new DateTime(1995, 5, 10)), // replaced by TJS\r\n                [\"ISO-4217-HISTORIC::ECV\"] = new Currency(\"ECV\", 983, NotApplicableByte, \"Ecuador Unidad de Valor Constante (funds code)\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2000, 1, 9), new DateTime(1993, 1, 1)), // replaced by (no successor)\r\n                [\"ISO-4217-HISTORIC::ECS\"] = new Currency(\"ECS\", 218, 0, \"Ecuadorian sucre\", \"S/.\", Iso4217Historic, new DateTime(2000, 12, 31), new DateTime(1884, 1, 1)), // replaced by USD\r\n                [\"ISO-4217-HISTORIC::BYB\"] = new Currency(\"BYB\", 112, 2, \"Belarusian ruble\", \"Br\", Iso4217Historic, new DateTime(1999, 12, 31), new DateTime(1992, 1, 1)), // replaced by BYR\r\n                [\"ISO-4217-HISTORIC::AOR\"] = new Currency(\"AOR\", 982, 0, \"Angolan kwanza readjustado\", \"Kz\", Iso4217Historic, new DateTime(1999, 11, 30), new DateTime(1995, 7, 1)), // replaced by AOA\r\n                [\"ISO-4217-HISTORIC::BGL\"] = new Currency(\"BGL\", 100, 2, \"Bulgarian lev A/99\", \"лв.\", Iso4217Historic, new DateTime(1999, 7, 5), new DateTime(1962, 1, 1)), // replaced by BGN\r\n                [\"ISO-4217-HISTORIC::ADF\"] = new Currency(\"ADF\",   0, 2, \"Andorran franc (1:1 peg to the French franc)\", \"Fr\", Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1960, 1, 1)), // replaced by EUR\r\n                [\"ISO-4217-HISTORIC::ADP\"] = new Currency(\"ADP\", 020, 0, \"Andorran peseta (1:1 peg to the Spanish peseta)\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1869, 1, 1)), // replaced by EUR\r\n                [\"ISO-4217-HISTORIC::ATS\"] = new Currency(\"ATS\", 040, 2, \"Austrian schilling\", \"öS\", Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1945, 1, 1)), // replaced by EUR\r\n                [\"ISO-4217-HISTORIC::BEF\"] = new Currency(\"BEF\", 056, 2, \"Belgian franc (currency union with LUF)\", \"fr.\", Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1832, 1, 1)), // replaced by EUR\r\n                [\"ISO-4217-HISTORIC::DEM\"] = new Currency(\"DEM\", 276, 2, \"German mark\", \"DM\", Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1948, 1, 1)), // replaced by EUR\r\n                [\"ISO-4217-HISTORIC::ESP\"] = new Currency(\"ESP\", 724, 0, \"Spanish peseta\", \"Pta\", Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1869, 1, 1)), // replaced by EUR\r\n                [\"ISO-4217-HISTORIC::FIM\"] = new Currency(\"FIM\", 246, 2, \"Finnish markka\", \"mk\", Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1860, 1, 1)), // replaced by EUR\r\n                [\"ISO-4217-HISTORIC::FRF\"] = new Currency(\"FRF\", 250, 2, \"French franc\", \"Fr\", Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1960, 1, 1)), // replaced by EUR\r\n                [\"ISO-4217-HISTORIC::IEP\"] = new Currency(\"IEP\", 372, 2, \"Irish pound (punt in Irish language)\", \"£\", Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1938, 1, 1)), // replaced by EUR\r\n                [\"ISO-4217-HISTORIC::ITL\"] = new Currency(\"ITL\", 380, 0, \"Italian lira\", \"₤\", Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1861, 1, 1)), // replaced by EUR\r\n                [\"ISO-4217-HISTORIC::LUF\"] = new Currency(\"LUF\", 442, 2, \"Luxembourg franc (currency union with BEF)\", \"fr.\", Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1944, 1, 1)), // replaced by EUR\r\n                [\"ISO-4217-HISTORIC::MCF\"] = new Currency(\"MCF\",   0, 2, \"Monegasque franc (currency union with FRF)\", \"fr.\", Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1960, 1, 1)), // replaced by EUR\r\n                [\"ISO-4217-HISTORIC::NLG\"] = new Currency(\"NLG\", 528, 2, \"Dutch guilder\", \"ƒ\", Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1810, 1, 1)), // replaced by EUR\r\n                [\"ISO-4217-HISTORIC::PTE\"] = new Currency(\"PTE\", 620, 0, \"Portuguese escudo\", \"$\", Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(4160, 1, 1)), // replaced by EUR\r\n                [\"ISO-4217-HISTORIC::SML\"] = new Currency(\"SML\",   0, 0, \"San Marinese lira (currency union with ITL and VAL)\", \"₤\", Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1864, 1, 1)), // replaced by EUR\r\n                [\"ISO-4217-HISTORIC::VAL\"] = new Currency(\"VAL\",   0, 0, \"Vatican lira (currency union with ITL and SML)\", \"₤\", Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1929, 1, 1)), // replaced by EUR\r\n                [\"ISO-4217-HISTORIC::XEU\"] = new Currency(\"XEU\", 954, NotApplicableByte, \"European Currency Unit (1 XEU = 1 EUR)\", \"ECU\", Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1979, 3, 13)), // replaced by EUR\r\n                [\"ISO-4217-HISTORIC::BAD\"] = new Currency(\"BAD\",   0, 2, \"Bosnia and Herzegovina dinar\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1992, 7, 1)), // replaced by BAM\r\n                [\"ISO-4217-HISTORIC::RUR\"] = new Currency(\"RUR\", 810, 2, \"Russian ruble A/97\", \"₽\", Iso4217Historic, new DateTime(1997, 12, 31), new DateTime(1992, 1, 1)), // replaced by RUB\r\n                [\"ISO-4217-HISTORIC::GWP\"] = new Currency(\"GWP\", 624, NotApplicableByte, \"Guinea-Bissau peso\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(1997, 12, 31), new DateTime(1975, 1, 1)), // replaced by XOF\r\n                [\"ISO-4217-HISTORIC::ZRN\"] = new Currency(\"ZRN\", 180, 2, \"Zaïrean new zaïre\", \"Ƶ\", Iso4217Historic, new DateTime(1997, 12, 31), new DateTime(1993, 1, 1)), // replaced by CDF\r\n                [\"ISO-4217-HISTORIC::UAK\"] = new Currency(\"UAK\", 804, NotApplicableByte, \"Ukrainian karbovanets\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(1996, 9, 1), new DateTime(1992, 10, 1)), // replaced by UAH\r\n                [\"ISO-4217-HISTORIC::YDD\"] = new Currency(\"YDD\", 720, NotApplicableByte, \"South Yemeni dinar\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(1996, 6, 11)), // replaced by YER\r\n                [\"ISO-4217-HISTORIC::AON\"] = new Currency(\"AON\", 024, 0, \"Angolan new kwanza\", \"Kz\", Iso4217Historic, new DateTime(1995, 6, 30), new DateTime(1990, 9, 25)), // replaced by AOR\r\n                [\"ISO-4217-HISTORIC::ZAL\"] = new Currency(\"ZAL\", 991, NotApplicableByte, \"South African financial rand (funds code)\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(1995, 3, 13), new DateTime(1985, 9, 1)), // replaced by (no successor)\r\n                [\"ISO-4217-HISTORIC::PLZ\"] = new Currency(\"PLZ\", 616, NotApplicableByte, \"Polish zloty A/94\", \"zł\", Iso4217Historic, new DateTime(1994, 12, 31), new DateTime(1950, 10, 30)), // replaced by PLN\r\n                [\"ISO-4217-HISTORIC::BRR\"] = new Currency(\"BRR\",   0, 2, \"Brazilian cruzeiro real\", \"CR$\", Iso4217Historic, new DateTime(1994, 6, 30), new DateTime(1993, 8, 1)), // replaced by BRL\r\n                [\"ISO-4217-HISTORIC::HRD\"] = new Currency(\"HRD\",   0, NotApplicableByte, \"Croatian dinar\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(1994, 5, 30), new DateTime(1991, 12, 23)), // replaced by HRK\r\n                [\"ISO-4217-HISTORIC::YUG\"] = new Currency(\"YUG\",   0, 2, \"Yugoslav dinar\", \"дин.\", Iso4217Historic, new DateTime(1994, 1, 23), new DateTime(1994, 1, 1)), // replaced by YUM\r\n                [\"ISO-4217-HISTORIC::YUO\"] = new Currency(\"YUO\",   0, 2, \"Yugoslav dinar\", \"дин.\", Iso4217Historic, new DateTime(1993, 12, 31), new DateTime(1993, 10, 1)), // replaced by YUG\r\n                [\"ISO-4217-HISTORIC::YUR\"] = new Currency(\"YUR\",   0, 2, \"Yugoslav dinar\", \"дин.\", Iso4217Historic, new DateTime(1993, 9, 30), new DateTime(1992, 7, 1)), // replaced by YUO\r\n                [\"ISO-4217-HISTORIC::BRE\"] = new Currency(\"BRE\",   0, 2, \"Brazilian cruzeiro\", \"₢\", Iso4217Historic, new DateTime(1993, 8, 1), new DateTime(1990, 3, 15)), // replaced by BRR\r\n                [\"ISO-4217-HISTORIC::UYN\"] = new Currency(\"UYN\", 858, NotApplicableByte, \"Uruguay Peso\", \"$U\", Iso4217Historic, new DateTime(1993, 3, 1), new DateTime(1975, 7, 1)), // replaced by UYU\r\n                [\"ISO-4217-HISTORIC::CSK\"] = new Currency(\"CSK\", 200, NotApplicableByte, \"Czechoslovak koruna\", \"Kčs\", Iso4217Historic, new DateTime(1993, 2, 8), new DateTime(7040, 1, 1)), // replaced by CZK and SKK (CZK and EUR)\r\n                [\"ISO-4217-HISTORIC::MKN\"] = new Currency(\"MKN\", 0, NotApplicableByte, \"Old Macedonian denar A/93\", \"ден\", Iso4217Historic, new DateTime(1993, 12, 31)), // replaced by MKD\r\n                [\"ISO-4217-HISTORIC::MXP\"] = new Currency(\"MXP\", 484, NotApplicableByte, \"Mexican peso\", \"$\", Iso4217Historic, new DateTime(1993, 12, 31)), // replaced by MXN\r\n                [\"ISO-4217-HISTORIC::ZRZ\"] = new Currency(\"ZRZ\",   0, 3, \"Zaïrean zaïre\", \"Ƶ\", Iso4217Historic, new DateTime(1993, 12, 31), new DateTime(1967, 1, 1)), // replaced by ZRN\r\n                [\"ISO-4217-HISTORIC::YUN\"] = new Currency(\"YUN\",   0, 2, \"Yugoslav dinar\", \"дин.\", Iso4217Historic, new DateTime(1992, 6, 30), new DateTime(1990, 1, 1)), // replaced by YUR\r\n                [\"ISO-4217-HISTORIC::SDP\"] = new Currency(\"SDP\", 736, NotApplicableByte, \"Sudanese old pound\", \"ج.س.\", Iso4217Historic, new DateTime(1992, 6, 8), new DateTime(1956, 1, 1)), // replaced by SDD\r\n                [\"ISO-4217-HISTORIC::ARA\"] = new Currency(\"ARA\",   0, 2, \"Argentine austral\", \"₳\", Iso4217Historic, new DateTime(1991, 12, 31), new DateTime(1985, 6, 15)), // replaced by ARS\r\n                [\"ISO-4217-HISTORIC::PEI\"] = new Currency(\"PEI\",   0, NotApplicableByte, \"Peruvian inti\", \"I/.\", Iso4217Historic, new DateTime(1991, 10, 1), new DateTime(1985, 2, 1)), // replaced by PEN\r\n                [\"ISO-4217-HISTORIC::SUR\"] = new Currency(\"SUR\", 810, NotApplicableByte, \"Soviet Union Ruble\", \"руб\", Iso4217Historic, new DateTime(1991, 12, 31), new DateTime(1961, 1, 1)), // replaced by RUR\r\n                [\"ISO-4217-HISTORIC::AOK\"] = new Currency(\"AOK\", 024, 0, \"Angolan kwanza\", \"Kz\", Iso4217Historic, new DateTime(1990, 9, 24), new DateTime(1977, 1, 8)), // replaced by AON\r\n                [\"ISO-4217-HISTORIC::DDM\"] = new Currency(\"DDM\", 278, NotApplicableByte, \"East German Mark of the GDR (East Germany)\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(1990, 7, 1), new DateTime(1948, 6, 21)), // replaced by DEM (EUR)\r\n                [\"ISO-4217-HISTORIC::BRN\"] = new Currency(\"BRN\",   0, 2, \"Brazilian cruzado novo\", \"NCz$\", Iso4217Historic, new DateTime(1990, 3, 15), new DateTime(1989, 1, 16)), // replaced by BRE\r\n                [\"ISO-4217-HISTORIC::YUD\"] = new Currency(\"YUD\", 891, 2, \"New Yugoslavian Dinar\", \"дин.\", Iso4217Historic, new DateTime(1989, 12, 31), new DateTime(1966, 1, 1)), // replaced by YUN\r\n                [\"ISO-4217-HISTORIC::BRC\"] = new Currency(\"BRC\",   0, 2, \"Brazilian cruzado\", \"Cz$\", Iso4217Historic, new DateTime(1989, 1, 15), new DateTime(1986, 2, 28)), // replaced by BRN\r\n                [\"ISO-4217-HISTORIC::BOP\"] = new Currency(\"BOP\", 068, 2, \"Peso boliviano\", \"b$.\", Iso4217Historic, new DateTime(1987, 1, 1), new DateTime(1963, 1, 1)), // replaced by BOB\r\n                [\"ISO-4217-HISTORIC::UGS\"] = new Currency(\"UGS\", 800, NotApplicableByte, \"Ugandan shilling A/87\", \"USh\", Iso4217Historic, new DateTime(1987, 12, 31)), // replaced by UGX\r\n                [\"ISO-4217-HISTORIC::BRB\"] = new Currency(\"BRB\", 076, 2, \"Brazilian cruzeiro\", \"₢\", Iso4217Historic, new DateTime(1986, 2, 28), new DateTime(1970, 1, 1)), // replaced by BRC\r\n                [\"ISO-4217-HISTORIC::ILR\"] = new Currency(\"ILR\", 376, 2, \"Israeli shekel\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(1985, 12, 31), new DateTime(1980, 2, 24)), // replaced by ILS\r\n                [\"ISO-4217-HISTORIC::ARP\"] = new Currency(\"ARP\",   0, 2, \"Argentine peso argentino\", \"$a\", Iso4217Historic, new DateTime(1985, 6, 14), new DateTime(1983, 6, 6)), // replaced by ARA\r\n                [\"ISO-4217-HISTORIC::PEH\"] = new Currency(\"PEH\", 604, NotApplicableByte, \"Peruvian old sol\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(1985, 2, 1), new DateTime(1863, 1, 1)), // replaced by PEI\r\n                [\"ISO-4217-HISTORIC::GQE\"] = new Currency(\"GQE\",   0, NotApplicableByte, \"Equatorial Guinean ekwele\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(1985, 12, 31), new DateTime(1975, 1, 1)), // replaced by XAF\r\n                [\"ISO-4217-HISTORIC::GNE\"] = new Currency(\"GNE\", 324, NotApplicableByte, \"Guinean syli\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(1985, 12, 31), new DateTime(1971, 1, 1)), // replaced by GNF\r\n                [\"ISO-4217-HISTORIC::MLF\"] = new Currency(\"MLF\",   0, NotApplicableByte, \"Mali franc\", \"MAF\", Iso4217Historic, new DateTime(1984, 12, 31)), // replaced by XOF\r\n                [\"ISO-4217-HISTORIC::ARL\"] = new Currency(\"ARL\",   0, 2, \"Argentine peso ley\", \"$L\", Iso4217Historic, new DateTime(1983, 5, 5), new DateTime(1970, 1, 1)), // replaced by ARP\r\n                [\"ISO-4217-HISTORIC::ISJ\"] = new Currency(\"ISJ\", 352, 2, \"Icelandic krona\", \"kr\", Iso4217Historic, new DateTime(1981, 12, 31), new DateTime(1922, 1, 1)), // replaced by ISK\r\n                [\"ISO-4217-HISTORIC::MVQ\"] = new Currency(\"MVQ\", 462, NotApplicableByte, \"Maldivian rupee\", \"Rf\", Iso4217Historic, new DateTime(1981, 12, 31)), // replaced by MVR\r\n                [\"ISO-4217-HISTORIC::ILP\"] = new Currency(\"ILP\", 376, 3, \"Israeli lira\", \"I£\", Iso4217Historic, new DateTime(1980, 12, 31), new DateTime(1948, 1, 1)), // ISRAEL Pound,  replaced by ILR\r\n                [\"ISO-4217-HISTORIC::ZWC\"] = new Currency(\"ZWC\", 716, 2, \"Rhodesian dollar\", \"$\", Iso4217Historic, new DateTime(1980, 12, 31), new DateTime(1970, 2, 17)), // replaced by ZWD\r\n                [\"ISO-4217-HISTORIC::LAJ\"] = new Currency(\"LAJ\", 418, NotApplicableByte, \"Pathet Lao Kip\", \"₭\", Iso4217Historic, new DateTime(1979, 12, 31)), // replaced by LAK\r\n                [\"ISO-4217-HISTORIC::TPE\"] = new Currency(\"TPE\",   0, NotApplicableByte, \"Portuguese Timorese escudo\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(1976, 12, 31), new DateTime(1959, 1, 1)), // replaced by IDR\r\n                [\"ISO-4217-HISTORIC::UYP\"] = new Currency(\"UYP\", 858, NotApplicableByte, \"Uruguay Peso\", \"$\", Iso4217Historic, new DateTime(1975, 7, 1), new DateTime(1896, 1, 1)), // replaced by UYN\r\n                [\"ISO-4217-HISTORIC::CLE\"] = new Currency(\"CLE\",   0, NotApplicableByte, \"Chilean escudo\", \"Eº\", Iso4217Historic, new DateTime(1975, 12, 31), new DateTime(1960, 1, 1)), // replaced by CLP\r\n                [\"ISO-4217-HISTORIC::MAF\"] = new Currency(\"MAF\",   0, NotApplicableByte, \"Moroccan franc\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(1976, 12, 31), new DateTime(1921, 1, 1)), // replaced by MAD\r\n                [\"ISO-4217-HISTORIC::PTP\"] = new Currency(\"PTP\",   0, NotApplicableByte, \"Portuguese Timorese pataca\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(1958, 12, 31), new DateTime(1894, 1, 1)), // replaced by TPE\r\n                [\"ISO-4217-HISTORIC::TNF\"] = new Currency(\"TNF\",   0, 2, \"Tunisian franc\", \"F\", Iso4217Historic, new DateTime(1958, 12, 31), new DateTime(1991, 7, 1)), // replaced by TND\r\n                [\"ISO-4217-HISTORIC::NFD\"] = new Currency(\"NFD\",   0, 2, \"Newfoundland dollar\", \"$\", Iso4217Historic, new DateTime(1949, 12, 31), new DateTime(1865, 1, 1)), // replaced by CAD\r\n\r\n                // Added historic currencies of amendment 164 (research dates and other info)\r\n                [\"ISO-4217-HISTORIC::VNC\"] = new Currency(\"VNC\", 704, 2, \"Old Dong\", \"₫\", Iso4217Historic, new DateTime(2014, 1, 1)), // VIETNAM, replaced by VND with same number! Formerly, it was subdivided into 10 hào.\r\n                [\"ISO-4217-HISTORIC::GNS\"] = new Currency(\"GNS\", 324, NotApplicableByte, \"Guinean Syli\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(1970, 12, 31)), // GUINEA, replaced by GNE?\r\n                [\"ISO-4217-HISTORIC::UGW\"] = new Currency(\"UGW\", 800, NotApplicableByte, \"Old Shilling\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2017, 9, 22)), // UGANDA\r\n                [\"ISO-4217-HISTORIC::RHD\"] = new Currency(\"RHD\", 716, NotApplicableByte, \"Rhodesian Dollar\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2017, 9, 22)), // SOUTHERN RHODESIA\r\n                [\"ISO-4217-HISTORIC::ROK\"] = new Currency(\"ROK\", 642, NotApplicableByte, \"Leu A/52\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2017, 9, 22)), // ROMANIA\r\n                [\"ISO-4217-HISTORIC::NIC\"] = new Currency(\"NIC\", 558, NotApplicableByte, \"Cordoba\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2017, 9, 22)), // NICARAGUA\r\n                [\"ISO-4217-HISTORIC::MZE\"] = new Currency(\"MZE\", 508, NotApplicableByte, \"Mozambique Escudo\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2017, 9, 22)), // MOZAMBIQUE\r\n                [\"ISO-4217-HISTORIC::MTP\"] = new Currency(\"MTP\", 470, NotApplicableByte, \"Maltese Pound\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2017, 9, 22)), // MALTA\r\n                [\"ISO-4217-HISTORIC::LSM\"] = new Currency(\"LSM\", 426, NotApplicableByte, \"Loti\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2017, 9, 22)), // LESOTHO\r\n                [\"ISO-4217-HISTORIC::GWE\"] = new Currency(\"GWE\", 624, NotApplicableByte, \"Guinea Escudo\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2017, 9, 22)), // GUINEA-BISSAU\r\n                [\"ISO-4217-HISTORIC::CSJ\"] = new Currency(\"CSJ\", 203, NotApplicableByte, \"Krona A/53\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2017, 9, 22)), // CZECHOSLOVAKIA\r\n                [\"ISO-4217-HISTORIC::BUK\"] = new Currency(\"BUK\", 104, NotApplicableByte, \"Kyat\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2017, 9, 22)), // BURMA\r\n                [\"ISO-4217-HISTORIC::BGK\"] = new Currency(\"BGK\", 100, NotApplicableByte, \"Lev A / 62\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2017, 9, 22)), // BULGARIA\r\n                [\"ISO-4217-HISTORIC::BGJ\"] = new Currency(\"BGJ\", 100, NotApplicableByte, \"Lev A / 52\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2017, 9, 22)), // BULGARIA\r\n                [\"ISO-4217-HISTORIC::ARY\"] = new Currency(\"ARY\", 032, NotApplicableByte, \"Peso\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2017, 9, 22)), // ARGENTINA\r\n            };\r\n        }\r\n\r\n        private static Currency[] InitializeIsoCurrenciesArray()\r\n        {\r\n            // TODO: Move to resource file.\r\n            return new Currency[]\r\n            {\r\n                // ISO-4217 currencies (list one)\r\n                new Currency(\"AED\", 784, 2, \"United Arab Emirates dirham\", \"د.إ\"),\r\n                new Currency(\"AFN\", 971, 2, \"Afghan afghani\", \"؋\"),\r\n                new Currency(\"ALL\", 008, 2, \"Albanian lek\", \"L\"),\r\n                new Currency(\"AMD\", 051, 2, \"Armenian dram\", \"֏\"),\r\n                new Currency(\"ANG\", 532, 2, \"Netherlands Antillean guilder\", \"ƒ\"),\r\n                new Currency(\"AOA\", 973, 2, \"Angolan kwanza\", \"Kz\"),\r\n                new Currency(\"ARS\", 032, 2, \"Argentine peso\", \"$\"),\r\n                new Currency(\"AUD\", 036, 2, \"Australian dollar\", \"$\"),\r\n                new Currency(\"AWG\", 533, 2, \"Aruban florin\", \"ƒ\"),\r\n                new Currency(\"AZN\", 944, 2, \"Azerbaijan Manat\", \"ман\"), // AZERBAIJAN\r\n                new Currency(\"BAM\", 977, 2, \"Bosnia and Herzegovina convertible mark\", \"KM\"),\r\n                new Currency(\"BBD\", 052, 2, \"Barbados dollar\", \"$\"),\r\n                new Currency(\"BDT\", 050, 2, \"Bangladeshi taka\", \"৳\"), // or Tk\r\n                new Currency(\"BGN\", 975, 2, \"Bulgarian lev\", \"лв.\"),\r\n                new Currency(\"BHD\", 048, 3, \"Bahraini dinar\", \"BD\"), // or د.ب. (switched for unit tests to work)\r\n                new Currency(\"BIF\", 108, 0, \"Burundian franc\", \"FBu\"),\r\n                new Currency(\"BMD\", 060, 2, \"Bermudian dollar\", \"$\"),\r\n                new Currency(\"BND\", 096, 2, \"Brunei dollar\", \"$\"), // or B$\r\n                new Currency(\"BOB\", 068, 2, \"Boliviano\", \"Bs.\"), // or BS or $b\r\n                new Currency(\"BOV\", 984, 2, \"Bolivian Mvdol (funds code)\", Currency.GenericCurrencySign), // <==== not found\r\n                new Currency(\"BRL\", 986, 2, \"Brazilian real\", \"R$\"),\r\n                new Currency(\"BSD\", 044, 2, \"Bahamian dollar\", \"$\"),\r\n                new Currency(\"BTN\", 064, 2, \"Bhutanese ngultrum\", \"Nu.\"),\r\n                new Currency(\"BWP\", 072, 2, \"Botswana pula\", \"P\"),\r\n                new Currency(\"BYN\", 933, 2, \"Belarusian ruble\", \"Br\", validFrom: new DateTime(2006, 06, 01)),\r\n                new Currency(\"BZD\", 084, 2, \"Belize dollar\", \"BZ$\"),\r\n                new Currency(\"CAD\", 124, 2, \"Canadian dollar\", \"$\"),\r\n                new Currency(\"CDF\", 976, 2, \"Congolese franc\", \"FC\"),\r\n                new Currency(\"CHE\", 947, 2, \"WIR Euro (complementary currency)\", \"CHE\"),\r\n                new Currency(\"CHF\", 756, 2, \"Swiss franc\", \"fr.\"), // or CHF\r\n                new Currency(\"CHW\", 948, 2, \"WIR Franc (complementary currency)\", \"CHW\"),\r\n                new Currency(\"CLF\", 990, 4, \"Unidad de Fomento (funds code)\", \"CLF\"),\r\n                new Currency(\"CLP\", 152, 0, \"Chilean peso\", \"$\"),\r\n                new Currency(\"CNY\", 156, 2, \"Chinese yuan\", \"¥\"),\r\n                new Currency(\"COP\", 170, 2, \"Colombian peso\", \"$\"),\r\n                new Currency(\"COU\", 970, 2, \"Unidad de Valor Real\", Currency.GenericCurrencySign), // ???\r\n                new Currency(\"CRC\", 188, 2, \"Costa Rican colon\", \"₡\"),\r\n                new Currency(\"CUC\", 931, 2, \"Cuban convertible peso\", \"CUC$\"), // $ or CUC\r\n                new Currency(\"CUP\", 192, 2, \"Cuban peso\", \"$\"), // or ₱ (obsolete?)\r\n                new Currency(\"CVE\", 132, 2, \"Cape Verde escudo\", \"$\"),\r\n                new Currency(\"CZK\", 203, 2, \"Czech koruna\", \"Kč\"),\r\n                new Currency(\"DJF\", 262, 0, \"Djiboutian franc\", \"Fdj\"),\r\n                new Currency(\"DKK\", 208, 2, \"Danish krone\", \"kr.\"),\r\n                new Currency(\"DOP\", 214, 2, \"Dominican peso\", \"RD$\"), // or $\r\n                new Currency(\"DZD\", 012, 2, \"Algerian dinar\", \"DA\"), // (Latin) or د.ج (Arabic)\r\n                new Currency(\"EGP\", 818, 2, \"Egyptian pound\", \"LE\"), // or E£ or ج.م (Arabic)\r\n                new Currency(\"ERN\", 232, 2, \"Eritrean nakfa\", \"ERN\"),\r\n                new Currency(\"ETB\", 230, 2, \"Ethiopian birr\", \"Br\"), // (Latin) or ብር (Ethiopic)\r\n                new Currency(\"EUR\", 978, 2, \"Euro\", \"€\"),\r\n                new Currency(\"FJD\", 242, 2, \"Fiji dollar\", \"$\"), // or FJ$\r\n                new Currency(\"FKP\", 238, 2, \"Falkland Islands pound\", \"£\"),\r\n                new Currency(\"GBP\", 826, 2, \"Pound sterling\", \"£\"),\r\n                new Currency(\"GEL\", 981, 2, \"Georgian lari\", \"ლ.\"), // TODO: new symbol since July 18, 2014 => see http://en.wikipedia.org/wiki/Georgian_lari\r\n                new Currency(\"GHS\", 936, 2, \"Ghanaian cedi\", \"GH¢\"), // or GH₵\r\n                new Currency(\"GIP\", 292, 2, \"Gibraltar pound\", \"£\"),\r\n                new Currency(\"GMD\", 270, 2, \"Gambian dalasi\", \"D\"),\r\n                new Currency(\"GNF\", 324, 0, \"Guinean Franc\", \"FG\"), // (possibly also Fr or GFr)  GUINEA\r\n                new Currency(\"GTQ\", 320, 2, \"Guatemalan quetzal\", \"Q\"),\r\n                new Currency(\"GYD\", 328, 2, \"Guyanese dollar\", \"$\"), // or G$\r\n                new Currency(\"HKD\", 344, 2, \"Hong Kong dollar\", \"HK$\"), // or $\r\n                new Currency(\"HNL\", 340, 2, \"Honduran lempira\", \"L\"),\r\n                new Currency(\"HRK\", 191, 2, \"Croatian kuna\", \"kn\"),\r\n                new Currency(\"HTG\", 332, 2, \"Haitian gourde\", \"G\"),\r\n                new Currency(\"HUF\", 348, 2, \"Hungarian forint\", \"Ft\"),\r\n                new Currency(\"IDR\", 360, 2, \"Indonesian rupiah\", \"Rp\"),\r\n                new Currency(\"ILS\", 376, 2, \"Israeli new shekel\", \"₪\"),\r\n                new Currency(\"INR\", 356, 2, \"Indian rupee\", \"₹\"),\r\n                new Currency(\"IQD\", 368, 3, \"Iraqi dinar\", \"د.ع\"),\r\n                new Currency(\"IRR\", 364, 2, \"Iranian rial\", \"ريال\"),\r\n                new Currency(\"ISK\", 352, 0, \"Icelandic króna\", \"kr\"),\r\n                new Currency(\"JMD\", 388, 2, \"Jamaican dollar\", \"J$\"), // or $\r\n                new Currency(\"JOD\", 400, 3, \"Jordanian dinar\", \"د.ا.\u200F\"),\r\n                new Currency(\"JPY\", 392, 0, \"Japanese yen\", \"¥\"),\r\n                new Currency(\"KES\", 404, 2, \"Kenyan shilling\", \"KSh\"),\r\n                new Currency(\"KGS\", 417, 2, \"Kyrgyzstani som\", \"сом\"),\r\n                new Currency(\"KHR\", 116, 2, \"Cambodian riel\", \"៛\"),\r\n                new Currency(\"KMF\", 174, 0, \"Comorian Franc\", \"CF\"), // COMOROS (THE)\r\n                new Currency(\"KPW\", 408, 2, \"North Korean won\", \"₩\"),\r\n                new Currency(\"KRW\", 410, 0, \"South Korean won\", \"₩\"),\r\n                new Currency(\"KWD\", 414, 3, \"Kuwaiti dinar\", \"د.ك\"), // or K.D.\r\n                new Currency(\"KYD\", 136, 2, \"Cayman Islands dollar\", \"$\"),\r\n                new Currency(\"KZT\", 398, 2, \"Kazakhstani tenge\", \"₸\"),\r\n                new Currency(\"LAK\", 418, 2, \"Lao Kip\", \"₭\"), // or ₭N,  LAO PEOPLE’S DEMOCRATIC REPUBLIC(THE), ISO says minor unit=2 but wiki says Historically, one kip was divided into 100 att (ອັດ).\r\n                new Currency(\"LBP\", 422, 2, \"Lebanese pound\", \"ل.ل\"),\r\n                new Currency(\"LKR\", 144, 2, \"Sri Lankan rupee\", \"Rs\"), // or රු\r\n                new Currency(\"LRD\", 430, 2, \"Liberian dollar\", \"$\"), // or L$, LD$\r\n                new Currency(\"LSL\", 426, 2, \"Lesotho loti\", \"L\"), // L or M (pl.)\r\n                new Currency(\"LYD\", 434, 3, \"Libyan dinar\", \"ل.د\"), // or LD\r\n                new Currency(\"MAD\", 504, 2, \"Moroccan dirham\", \"د.م.\"),\r\n                new Currency(\"MDL\", 498, 2, \"Moldovan leu\", \"L\"),\r\n                new Currency(\"MGA\", 969, Z07Byte, \"Malagasy ariary\", \"Ar\"),  // divided into five subunits rather than by a power of ten. 5 is 10 to the power of 0.69897...\r\n                new Currency(\"MKD\", 807, 2, \"Macedonian denar\", \"ден\"),\r\n                new Currency(\"MMK\", 104, 2, \"Myanma kyat\", \"K\"),\r\n                new Currency(\"MNT\", 496, 2, \"Mongolian tugrik\", \"₮\"),\r\n                new Currency(\"MOP\", 446, 2, \"Macanese pataca\", \"MOP$\"),\r\n                new Currency(\"MRU\", 929, Z07Byte, \"Mauritanian ouguiya\", \"UM\", validFrom: new DateTime(2018, 01, 01)), // divided into five subunits rather than by a power of ten. 5 is 10 to the power of 0.69897...\r\n                new Currency(\"MUR\", 480, 2, \"Mauritian rupee\", \"Rs\"),\r\n                new Currency(\"MVR\", 462, 2, \"Maldivian rufiyaa\", \"Rf\"), // or , MRf, MVR, .ރ or /-\r\n                new Currency(\"MWK\", 454, 2, \"Malawi kwacha\", \"MK\"),\r\n                new Currency(\"MXN\", 484, 2, \"Mexican peso\", \"$\"),\r\n                new Currency(\"MXV\", 979, 2, \"Mexican Unidad de Inversion (UDI) (funds code)\", Currency.GenericCurrencySign),  // <==== not found\r\n                new Currency(\"MYR\", 458, 2, \"Malaysian ringgit\", \"RM\"),\r\n                new Currency(\"MZN\", 943, 2, \"Mozambican metical\", \"MTn\"), // or MTN\r\n                new Currency(\"NAD\", 516, 2, \"Namibian dollar\", \"N$\"), // or $\r\n                new Currency(\"NGN\", 566, 2, \"Nigerian naira\", \"₦\"),\r\n                new Currency(\"NIO\", 558, 2, \"Nicaraguan córdoba\", \"C$\"),\r\n                new Currency(\"NOK\", 578, 2, \"Norwegian krone\", \"kr\"),\r\n                new Currency(\"NPR\", 524, 2, \"Nepalese rupee\", \"Rs\"), // or ₨ or रू\r\n                new Currency(\"NZD\", 554, 2, \"New Zealand dollar\", \"$\"),\r\n                new Currency(\"OMR\", 512, 3, \"Omani rial\", \"ر.ع.\"),\r\n                new Currency(\"PAB\", 590, 2, \"Panamanian balboa\", \"B/.\"),\r\n                new Currency(\"PEN\", 604, 2, \"Peruvian sol\", \"S/.\"),\r\n                new Currency(\"PGK\", 598, 2, \"Papua New Guinean kina\", \"K\"),\r\n                new Currency(\"PHP\", 608, 2, \"Philippine Peso\", \"₱\"), // or P or PHP or PhP\r\n                new Currency(\"PKR\", 586, 2, \"Pakistani rupee\", \"Rs\"),\r\n                new Currency(\"PLN\", 985, 2, \"Polish złoty\", \"zł\"),\r\n                new Currency(\"PYG\", 600, 0, \"Paraguayan guaraní\", \"₲\"),\r\n                new Currency(\"QAR\", 634, 2, \"Qatari riyal\", \"ر.ق\"), // or QR\r\n                new Currency(\"RON\", 946, 2, \"Romanian new leu\", \"lei\"),\r\n                new Currency(\"RSD\", 941, 2, \"Serbian dinar\", \"РСД\"), // or RSD (or дин or d./д)\r\n                new Currency(\"RUB\", 643, 2, \"Russian rouble\", \"₽\"), // or R or руб (both onofficial)\r\n                new Currency(\"RWF\", 646, 0, \"Rwandan franc\", \"RFw\"), // or RF, R₣\r\n                new Currency(\"SAR\", 682, 2, \"Saudi riyal\", \"ر.س\"), // or SR (Latin) or ﷼\u200E (Unicode)\r\n                new Currency(\"SBD\", 090, 2, \"Solomon Islands dollar\", \"SI$\"),\r\n                new Currency(\"SCR\", 690, 2, \"Seychelles rupee\", \"SR\"), // or SRe\r\n                new Currency(\"SDG\", 938, 2, \"Sudanese pound\", \"ج.س.\"),\r\n                new Currency(\"SEK\", 752, 2, \"Swedish krona/kronor\", \"kr\"),\r\n                new Currency(\"SGD\", 702, 2, \"Singapore dollar\", \"S$\"), // or $\r\n                new Currency(\"SHP\", 654, 2, \"Saint Helena pound\", \"£\"),\r\n                new Currency(\"SLL\", 694, 2, \"Sierra Leonean leone\", \"Le\"),\r\n                new Currency(\"SOS\", 706, 2, \"Somali shilling\", \"S\"), // or Sh.So.\r\n                new Currency(\"SRD\", 968, 2, \"Surinamese dollar\", \"$\"),\r\n                new Currency(\"SSP\", 728, 2, \"South Sudanese pound\", \"£\"), // not sure about symbol...\r\n                new Currency(\"SVC\", 222, 2, \"El Salvador Colon\", \"₡\"),\r\n                new Currency(\"SYP\", 760, 2, \"Syrian pound\", \"ܠ.ܣ.\u200F\"), // or LS or £S (or £)\r\n                new Currency(\"SZL\", 748, 2, \"Swazi lilangeni\", \"L\"), // or E (plural)\r\n                new Currency(\"THB\", 764, 2, \"Thai baht\", \"฿\"),\r\n                new Currency(\"TJS\", 972, 2, \"Tajikistani somoni\", \"смн\"),\r\n                new Currency(\"TMT\", 934, 2, \"Turkmenistani manat\", \"m\"), // or T?\r\n                new Currency(\"TND\", 788, 3, \"Tunisian dinar\", \"د.ت\"), // or DT (Latin)\r\n                new Currency(\"TOP\", 776, 2, \"Tongan paʻanga\", \"T$\"), // (sometimes PT)\r\n                new Currency(\"TRY\", 949, 2, \"Turkish lira\", \"₺\"),\r\n                new Currency(\"TTD\", 780, 2, \"Trinidad and Tobago dollar\", \"$\"), // or TT$\r\n                new Currency(\"TWD\", 901, 2, \"New Taiwan dollar\", \"NT$\"), // or $\r\n                new Currency(\"TZS\", 834, 2, \"Tanzanian shilling\", \"x/y\"), // or TSh\r\n                new Currency(\"UAH\", 980, 2, \"Ukrainian hryvnia\", \"₴\"),\r\n                new Currency(\"UGX\", 800, 0, \"Ugandan shilling\", \"USh\"),\r\n                new Currency(\"USD\", 840, 2, \"United States dollar\", \"$\"), // or US$\r\n                new Currency(\"USN\", 997, 2, \"United States dollar (next day) (funds code)\", \"$\"),\r\n                new Currency(\"UYI\", 940, 0, \"Uruguay Peso en Unidades Indexadas (UI) (funds code)\", Currency.GenericCurrencySign), // List two\r\n                new Currency(\"UYU\", 858, 2, \"Uruguayan peso\", \"$\"), // or $U\r\n                new Currency(\"UZS\", 860, 2, \"Uzbekistan som\", \"лв\"), // or сўм ?\r\n                new Currency(\"VES\", 928, 2, \"Venezuelan Bolívar Soberano\", \"Bs.\", validFrom: new DateTime(2018, 8, 20)), // or Bs.F. , Amendment 167 talks about delay but from multiple sources on the web the date seems to be 20 aug.\r\n                new Currency(\"VND\", 704, 0, \"Vietnamese dong\", \"₫\"),\r\n                new Currency(\"VUV\", 548, 0, \"Vanuatu vatu\", \"VT\"),\r\n                new Currency(\"WST\", 882, 2, \"Samoan tala\", \"WS$\"), // sometimes SAT, ST or T\r\n                new Currency(\"XAF\", 950, 0, \"CFA franc BEAC\", \"FCFA\"),\r\n                new Currency(\"XAG\", 961, NotApplicableByte, \"Silver (one troy ounce)\", Currency.GenericCurrencySign),\r\n                new Currency(\"XAU\", 959, NotApplicableByte, \"Gold (one troy ounce)\", Currency.GenericCurrencySign),\r\n                new Currency(\"XBA\", 955, NotApplicableByte, \"European Composite Unit (EURCO) (bond market unit)\", Currency.GenericCurrencySign),\r\n                new Currency(\"XBB\", 956, NotApplicableByte, \"European Monetary Unit (E.M.U.-6) (bond market unit)\", Currency.GenericCurrencySign),\r\n                new Currency(\"XBC\", 957, NotApplicableByte, \"European Unit of Account 9 (E.U.A.-9) (bond market unit)\", Currency.GenericCurrencySign),\r\n                new Currency(\"XBD\", 958, NotApplicableByte, \"European Unit of Account 17 (E.U.A.-17) (bond market unit)\", Currency.GenericCurrencySign),\r\n                new Currency(\"XCD\", 951, 2, \"East Caribbean dollar\", \"$\"), // or EC$\r\n                new Currency(\"XDR\", 960, NotApplicableByte, \"Special drawing rights\", Currency.GenericCurrencySign),\r\n                new Currency(\"XOF\", 952, 0, \"CFA franc BCEAO\", \"CFA\"),\r\n                new Currency(\"XPD\", 964, NotApplicableByte, \"Palladium (one troy ounce)\", Currency.GenericCurrencySign),\r\n                new Currency(\"XPF\", 953, 0, \"CFP franc\", \"F\"),\r\n                new Currency(\"XPT\", 962, NotApplicableByte, \"Platinum (one troy ounce)\", Currency.GenericCurrencySign),\r\n                new Currency(\"XSU\", 994, NotApplicableByte, \"SUCRE\", Currency.GenericCurrencySign),\r\n                new Currency(\"XTS\", 963, NotApplicableByte, \"Code reserved for testing purposes\", Currency.GenericCurrencySign),\r\n                new Currency(\"XUA\", 965, NotApplicableByte, \"ADB Unit of Account\", Currency.GenericCurrencySign),\r\n                new Currency(\"XXX\", 999, NotApplicableByte, \"No currency\", Currency.GenericCurrencySign),\r\n                new Currency(\"YER\", 886, 2, \"Yemeni rial\", \"﷼\"), // or ر.ي.\u200F\u200F ?\r\n                new Currency(\"ZAR\", 710, 2, \"South African rand\", \"R\"),\r\n                new Currency(\"ZMW\", 967, 2, \"Zambian kwacha\", \"ZK\"), // or ZMW\r\n                new Currency(\"ZWL\", 932, 2, \"Zimbabwean dollar\", \"$\"),\r\n                new Currency(\"STN\", 930, 2, \"Dobra\", \"Db\", validFrom: new DateTime(2018, 1, 1)), // New Currency of São Tomé and Príncipe from 1 Jan 2018 (Amendment 164)\r\n                new Currency(\"STD\", 678, 2, \"Dobra\", \"Db\", validTo: new DateTime(2018, 1, 1)), // To be replaced Currency of São Tomé and Príncipe from 1 Jan 2018 (Amendment 164),  inflation has rendered the cêntimo obsolete\r\n                new Currency(\"UYW\", 927, 4, \"Unidad Previsional\", \"Db\", validFrom: new DateTime(2018, 8, 29)), // The Central Bank of Uruguay is applying for new Fund currency code (Amendment 169)\r\n\r\n                // Historic ISO-4217 currencies (list three)\r\n                new Currency(\"BYR\", 974, 0, \"Belarusian ruble\", \"Br\", Iso4217Historic, validTo: new DateTime(2016, 12, 31), validFrom: new DateTime(2000, 01, 01)),\r\n                new Currency(\"VEF\", 937, 2, \"Venezuelan bolívar\", \"Bs.\", Iso4217Historic, new DateTime(2018, 8, 20)), // replaced by VEF, The conversion rate is 1000 (old) Bolívar to 1 (new) Bolívar Soberano (1000:1). The expiration date of the current bolívar will be defined later and communicated by the Central Bank of Venezuela in due time.\r\n                new Currency(\"MRO\", 478, Z07Byte, \"Mauritanian ouguiya\", \"UM\", Iso4217Historic, new DateTime(2018, 1, 1)), // replaced by MRU\r\n                new Currency(\"ESA\", 996, NotApplicableByte, \"Spanish peseta (account A)\", \"Pta\", Iso4217Historic, new DateTime(2002, 3, 1)), // replaced by ESP (EUR)\r\n                new Currency(\"ESB\", 995, NotApplicableByte, \"Spanish peseta (account B)\", \"Pta\", Iso4217Historic, new DateTime(2002, 3, 1)), // replaced by ESP (EUR)\r\n                new Currency(\"LTL\", 440, 2, \"Lithuanian litas\", \"Lt\", Iso4217Historic, new DateTime(2014, 12, 31), new DateTime(1993, 1, 1)), // replaced by EUR\r\n                new Currency(\"USS\", 998, 2, \"United States dollar (same day) (funds code)\", \"$\", Iso4217Historic, new DateTime(2014, 3, 28)), // replaced by (no successor)\r\n                new Currency(\"LVL\", 428, 2, \"Latvian lats\", \"Ls\", Iso4217Historic, new DateTime(2013, 12, 31), new DateTime(1992, 1, 1)), // replaced by EUR\r\n                new Currency(\"XFU\", 0, NotApplicableByte, \"UIC franc (special settlement currency) International Union of Railways\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2013, 11, 7)), // replaced by EUR\r\n                new Currency(\"ZMK\", 894, 2, \"Zambian kwacha\", \"ZK\", Iso4217Historic, new DateTime(2013, 1, 1), new DateTime(1968, 1, 16)), // replaced by ZMW\r\n                new Currency(\"EEK\", 233, 2, \"Estonian kroon\", \"kr\", Iso4217Historic, new DateTime(2010, 12, 31), new DateTime(1992, 1, 1)), // replaced by EUR\r\n                new Currency(\"ZWR\", 935, 2, \"Zimbabwean dollar A/09\", \"$\", Iso4217Historic, new DateTime(2009, 2, 2), new DateTime(2008, 8, 1)), // replaced by ZWL\r\n                new Currency(\"SKK\", 703, 2, \"Slovak koruna\", \"Sk\", Iso4217Historic, new DateTime(2008, 12, 31), new DateTime(1993, 2, 8)), // replaced by EUR\r\n                new Currency(\"TMM\", 795, 0, \"Turkmenistani manat\", \"T\", Iso4217Historic, new DateTime(2008, 12, 31), new DateTime(1993, 11, 1)), // replaced by TMT\r\n                new Currency(\"ZWN\", 942, 2, \"Zimbabwean dollar A/08\", \"$\", Iso4217Historic, new DateTime(2008, 7, 31), new DateTime(2006, 8, 1)), // replaced by ZWR\r\n                new Currency(\"VEB\", 862, 2, \"Venezuelan bolívar\", \"Bs.\", Iso4217Historic, new DateTime(2008, 1, 1)), // replaced by VEF\r\n                new Currency(\"CYP\", 196, 2, \"Cypriot pound\", \"£\", Iso4217Historic, new DateTime(2007, 12, 31), new DateTime(1879, 1, 1)), // replaced by EUR\r\n                new Currency(\"MTL\", 470, 2, \"Maltese lira\", \"₤\", Iso4217Historic, new DateTime(2007, 12, 31), new DateTime(1972, 1, 1)), // replaced by EUR\r\n                new Currency(\"GHC\", 288, 0, \"Ghanaian cedi\", \"GH₵\", Iso4217Historic, new DateTime(2007, 7, 1), new DateTime(1967, 1, 1)), // replaced by GHS\r\n                new Currency(\"SDD\", 736, NotApplicableByte, \"Sudanese dinar\", \"£Sd\", Iso4217Historic, new DateTime(2007, 1, 10), new DateTime(1992, 6, 8)), // replaced by SDG\r\n                new Currency(\"SIT\", 705, 2, \"Slovenian tolar\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2006, 12, 31), new DateTime(1991, 10, 8)), // replaced by EUR\r\n                new Currency(\"ZWD\", 716, 2, \"Zimbabwean dollar A/06\", \"$\", Iso4217Historic, new DateTime(2006, 7, 31), new DateTime(1980, 4, 18)), // replaced by ZWN\r\n                new Currency(\"MZM\", 508, 0, \"Mozambican metical\", \"MT\", Iso4217Historic, new DateTime(2006, 6, 30), new DateTime(1980, 1, 1)), // replaced by MZN\r\n                new Currency(\"AZM\", 031, 0, \"Azerbaijani manat\", \"₼\", Iso4217Historic, new DateTime(2006, 1, 1), new DateTime(1992, 8, 15)), // replaced by AZN\r\n                new Currency(\"CSD\", 891, 2, \"Serbian dinar\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2006, 12, 31), new DateTime(2003, 7, 3)), // replaced by RSD\r\n                new Currency(\"MGF\", 450, 2, \"Malagasy franc\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2005, 1, 1), new DateTime(1963, 7, 1)), // replaced by MGA\r\n                new Currency(\"ROL\", 642, NotApplicableByte, \"Romanian leu A/05\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2005, 12, 31), new DateTime(1952, 1, 28)), // replaced by RON\r\n                new Currency(\"TRL\", 792, 0, \"Turkish lira A/05\", \"₺\", Iso4217Historic, new DateTime(2005, 12, 31)), // replaced by TRY\r\n                new Currency(\"SRG\", 740, NotApplicableByte, \"Suriname guilder\", \"ƒ\", Iso4217Historic, new DateTime(2004, 12, 31)), // replaced by SRD\r\n                new Currency(\"YUM\", 891, 2, \"Yugoslav dinar\", \"дин.\", Iso4217Historic, new DateTime(2003, 7, 2), new DateTime(1994, 1, 24)), // replaced by CSD\r\n                new Currency(\"AFA\", 004, NotApplicableByte, \"Afghan afghani\", \"؋\", Iso4217Historic, new DateTime(2003, 12, 31), new DateTime(1925, 1, 1)), // replaced by AFN\r\n                new Currency(\"XFO\", 0, NotApplicableByte, \"Gold franc (special settlement currency)\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2003, 12, 31), new DateTime(1803, 1, 1)), // replaced by XDR\r\n                new Currency(\"GRD\", 300, 2, \"Greek drachma\", \"₯\", Iso4217Historic, new DateTime(2000, 12, 31), new DateTime(1954, 1, 1)), // replaced by EUR\r\n                new Currency(\"TJR\", 762, NotApplicableByte, \"Tajikistani ruble\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2000, 10, 30), new DateTime(1995, 5, 10)), // replaced by TJS\r\n                new Currency(\"ECV\", 983, NotApplicableByte, \"Ecuador Unidad de Valor Constante (funds code)\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2000, 1, 9), new DateTime(1993, 1, 1)), // replaced by (no successor)\r\n                new Currency(\"ECS\", 218, 0, \"Ecuadorian sucre\", \"S/.\", Iso4217Historic, new DateTime(2000, 12, 31), new DateTime(1884, 1, 1)), // replaced by USD\r\n                new Currency(\"BYB\", 112, 2, \"Belarusian ruble\", \"Br\", Iso4217Historic, new DateTime(1999, 12, 31), new DateTime(1992, 1, 1)), // replaced by BYR\r\n                new Currency(\"AOR\", 982, 0, \"Angolan kwanza readjustado\", \"Kz\", Iso4217Historic, new DateTime(1999, 11, 30), new DateTime(1995, 7, 1)), // replaced by AOA\r\n                new Currency(\"BGL\", 100, 2, \"Bulgarian lev A/99\", \"лв.\", Iso4217Historic, new DateTime(1999, 7, 5), new DateTime(1962, 1, 1)), // replaced by BGN\r\n                new Currency(\"ADF\", 0, 2, \"Andorran franc (1:1 peg to the French franc)\", \"Fr\", Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1960, 1, 1)), // replaced by EUR\r\n                new Currency(\"ADP\", 020, 0, \"Andorran peseta (1:1 peg to the Spanish peseta)\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1869, 1, 1)), // replaced by EUR\r\n                new Currency(\"ATS\", 040, 2, \"Austrian schilling\", \"öS\", Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1945, 1, 1)), // replaced by EUR\r\n                new Currency(\"BEF\", 056, 2, \"Belgian franc (currency union with LUF)\", \"fr.\", Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1832, 1, 1)), // replaced by EUR\r\n                new Currency(\"DEM\", 276, 2, \"German mark\", \"DM\", Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1948, 1, 1)), // replaced by EUR\r\n                new Currency(\"ESP\", 724, 0, \"Spanish peseta\", \"Pta\", Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1869, 1, 1)), // replaced by EUR\r\n                new Currency(\"FIM\", 246, 2, \"Finnish markka\", \"mk\", Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1860, 1, 1)), // replaced by EUR\r\n                new Currency(\"FRF\", 250, 2, \"French franc\", \"Fr\", Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1960, 1, 1)), // replaced by EUR\r\n                new Currency(\"IEP\", 372, 2, \"Irish pound (punt in Irish language)\", \"£\", Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1938, 1, 1)), // replaced by EUR\r\n                new Currency(\"ITL\", 380, 0, \"Italian lira\", \"₤\", Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1861, 1, 1)), // replaced by EUR\r\n                new Currency(\"LUF\", 442, 2, \"Luxembourg franc (currency union with BEF)\", \"fr.\", Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1944, 1, 1)), // replaced by EUR\r\n                new Currency(\"MCF\", 0, 2, \"Monegasque franc (currency union with FRF)\", \"fr.\", Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1960, 1, 1)), // replaced by EUR\r\n                new Currency(\"NLG\", 528, 2, \"Dutch guilder\", \"ƒ\", Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1810, 1, 1)), // replaced by EUR\r\n                new Currency(\"PTE\", 620, 0, \"Portuguese escudo\", \"$\", Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(4160, 1, 1)), // replaced by EUR\r\n                new Currency(\"SML\", 0, 0, \"San Marinese lira (currency union with ITL and VAL)\", \"₤\", Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1864, 1, 1)), // replaced by EUR\r\n                new Currency(\"VAL\", 0, 0, \"Vatican lira (currency union with ITL and SML)\", \"₤\", Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1929, 1, 1)), // replaced by EUR\r\n                new Currency(\"XEU\", 954, NotApplicableByte, \"European Currency Unit (1 XEU = 1 EUR)\", \"ECU\", Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1979, 3, 13)), // replaced by EUR\r\n                new Currency(\"BAD\", 0, 2, \"Bosnia and Herzegovina dinar\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(1998, 12, 31), new DateTime(1992, 7, 1)), // replaced by BAM\r\n                new Currency(\"RUR\", 810, 2, \"Russian ruble A/97\", \"₽\", Iso4217Historic, new DateTime(1997, 12, 31), new DateTime(1992, 1, 1)), // replaced by RUB\r\n                new Currency(\"GWP\", 624, NotApplicableByte, \"Guinea-Bissau peso\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(1997, 12, 31), new DateTime(1975, 1, 1)), // replaced by XOF\r\n                new Currency(\"ZRN\", 180, 2, \"Zaïrean new zaïre\", \"Ƶ\", Iso4217Historic, new DateTime(1997, 12, 31), new DateTime(1993, 1, 1)), // replaced by CDF\r\n                new Currency(\"UAK\", 804, NotApplicableByte, \"Ukrainian karbovanets\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(1996, 9, 1), new DateTime(1992, 10, 1)), // replaced by UAH\r\n                new Currency(\"YDD\", 720, NotApplicableByte, \"South Yemeni dinar\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(1996, 6, 11)), // replaced by YER\r\n                new Currency(\"AON\", 024, 0, \"Angolan new kwanza\", \"Kz\", Iso4217Historic, new DateTime(1995, 6, 30), new DateTime(1990, 9, 25)), // replaced by AOR\r\n                new Currency(\"ZAL\", 991, NotApplicableByte, \"South African financial rand (funds code)\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(1995, 3, 13), new DateTime(1985, 9, 1)), // replaced by (no successor)\r\n                new Currency(\"PLZ\", 616, NotApplicableByte, \"Polish zloty A/94\", \"zł\", Iso4217Historic, new DateTime(1994, 12, 31), new DateTime(1950, 10, 30)), // replaced by PLN\r\n                new Currency(\"BRR\", 0, 2, \"Brazilian cruzeiro real\", \"CR$\", Iso4217Historic, new DateTime(1994, 6, 30), new DateTime(1993, 8, 1)), // replaced by BRL\r\n                new Currency(\"HRD\", 0, NotApplicableByte, \"Croatian dinar\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(1994, 5, 30), new DateTime(1991, 12, 23)), // replaced by HRK\r\n                new Currency(\"YUG\", 0, 2, \"Yugoslav dinar\", \"дин.\", Iso4217Historic, new DateTime(1994, 1, 23), new DateTime(1994, 1, 1)), // replaced by YUM\r\n                new Currency(\"YUO\", 0, 2, \"Yugoslav dinar\", \"дин.\", Iso4217Historic, new DateTime(1993, 12, 31), new DateTime(1993, 10, 1)), // replaced by YUG\r\n                new Currency(\"YUR\", 0, 2, \"Yugoslav dinar\", \"дин.\", Iso4217Historic, new DateTime(1993, 9, 30), new DateTime(1992, 7, 1)), // replaced by YUO\r\n                new Currency(\"BRE\", 0, 2, \"Brazilian cruzeiro\", \"₢\", Iso4217Historic, new DateTime(1993, 8, 1), new DateTime(1990, 3, 15)), // replaced by BRR\r\n                new Currency(\"UYN\", 858, NotApplicableByte, \"Uruguay Peso\", \"$U\", Iso4217Historic, new DateTime(1993, 3, 1), new DateTime(1975, 7, 1)), // replaced by UYU\r\n                new Currency(\"CSK\", 200, NotApplicableByte, \"Czechoslovak koruna\", \"Kčs\", Iso4217Historic, new DateTime(1993, 2, 8), new DateTime(7040, 1, 1)), // replaced by CZK and SKK (CZK and EUR)\r\n                new Currency(\"MKN\", 0, NotApplicableByte, \"Old Macedonian denar A/93\", \"ден\", Iso4217Historic, new DateTime(1993, 12, 31)), // replaced by MKD\r\n                new Currency(\"MXP\", 484, NotApplicableByte, \"Mexican peso\", \"$\", Iso4217Historic, new DateTime(1993, 12, 31)), // replaced by MXN\r\n                new Currency(\"ZRZ\", 0, 3, \"Zaïrean zaïre\", \"Ƶ\", Iso4217Historic, new DateTime(1993, 12, 31), new DateTime(1967, 1, 1)), // replaced by ZRN\r\n                new Currency(\"YUN\", 0, 2, \"Yugoslav dinar\", \"дин.\", Iso4217Historic, new DateTime(1992, 6, 30), new DateTime(1990, 1, 1)), // replaced by YUR\r\n                new Currency(\"SDP\", 736, NotApplicableByte, \"Sudanese old pound\", \"ج.س.\", Iso4217Historic, new DateTime(1992, 6, 8), new DateTime(1956, 1, 1)), // replaced by SDD\r\n                new Currency(\"ARA\", 0, 2, \"Argentine austral\", \"₳\", Iso4217Historic, new DateTime(1991, 12, 31), new DateTime(1985, 6, 15)), // replaced by ARS\r\n                new Currency(\"PEI\", 0, NotApplicableByte, \"Peruvian inti\", \"I/.\", Iso4217Historic, new DateTime(1991, 10, 1), new DateTime(1985, 2, 1)), // replaced by PEN\r\n                new Currency(\"SUR\", 810, NotApplicableByte, \"Soviet Union Ruble\", \"руб\", Iso4217Historic, new DateTime(1991, 12, 31), new DateTime(1961, 1, 1)), // replaced by RUR\r\n                new Currency(\"AOK\", 024, 0, \"Angolan kwanza\", \"Kz\", Iso4217Historic, new DateTime(1990, 9, 24), new DateTime(1977, 1, 8)), // replaced by AON\r\n                new Currency(\"DDM\", 278, NotApplicableByte, \"East German Mark of the GDR (East Germany)\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(1990, 7, 1), new DateTime(1948, 6, 21)), // replaced by DEM (EUR)\r\n                new Currency(\"BRN\", 0, 2, \"Brazilian cruzado novo\", \"NCz$\", Iso4217Historic, new DateTime(1990, 3, 15), new DateTime(1989, 1, 16)), // replaced by BRE\r\n                new Currency(\"YUD\", 891, 2, \"New Yugoslavian Dinar\", \"дин.\", Iso4217Historic, new DateTime(1989, 12, 31), new DateTime(1966, 1, 1)), // replaced by YUN\r\n                new Currency(\"BRC\", 0, 2, \"Brazilian cruzado\", \"Cz$\", Iso4217Historic, new DateTime(1989, 1, 15), new DateTime(1986, 2, 28)), // replaced by BRN\r\n                new Currency(\"BOP\", 068, 2, \"Peso boliviano\", \"b$.\", Iso4217Historic, new DateTime(1987, 1, 1), new DateTime(1963, 1, 1)), // replaced by BOB\r\n                new Currency(\"UGS\", 800, NotApplicableByte, \"Ugandan shilling A/87\", \"USh\", Iso4217Historic, new DateTime(1987, 12, 31)), // replaced by UGX\r\n                new Currency(\"BRB\", 076, 2, \"Brazilian cruzeiro\", \"₢\", Iso4217Historic, new DateTime(1986, 2, 28), new DateTime(1970, 1, 1)), // replaced by BRC\r\n                new Currency(\"ILR\", 376, 2, \"Israeli shekel\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(1985, 12, 31), new DateTime(1980, 2, 24)), // replaced by ILS\r\n                new Currency(\"ARP\", 0, 2, \"Argentine peso argentino\", \"$a\", Iso4217Historic, new DateTime(1985, 6, 14), new DateTime(1983, 6, 6)), // replaced by ARA\r\n                new Currency(\"PEH\", 604, NotApplicableByte, \"Peruvian old sol\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(1985, 2, 1), new DateTime(1863, 1, 1)), // replaced by PEI\r\n                new Currency(\"GQE\", 0, NotApplicableByte, \"Equatorial Guinean ekwele\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(1985, 12, 31), new DateTime(1975, 1, 1)), // replaced by XAF\r\n                new Currency(\"GNE\", 324, NotApplicableByte, \"Guinean syli\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(1985, 12, 31), new DateTime(1971, 1, 1)), // replaced by GNF\r\n                new Currency(\"MLF\", 0, NotApplicableByte, \"Mali franc\", \"MAF\", Iso4217Historic, new DateTime(1984, 12, 31)), // replaced by XOF\r\n                new Currency(\"ARL\", 0, 2, \"Argentine peso ley\", \"$L\", Iso4217Historic, new DateTime(1983, 5, 5), new DateTime(1970, 1, 1)), // replaced by ARP\r\n                new Currency(\"ISJ\", 352, 2, \"Icelandic krona\", \"kr\", Iso4217Historic, new DateTime(1981, 12, 31), new DateTime(1922, 1, 1)), // replaced by ISK\r\n                new Currency(\"MVQ\", 462, NotApplicableByte, \"Maldivian rupee\", \"Rf\", Iso4217Historic, new DateTime(1981, 12, 31)), // replaced by MVR\r\n                new Currency(\"ILP\", 376, 3, \"Israeli lira\", \"I£\", Iso4217Historic, new DateTime(1980, 12, 31), new DateTime(1948, 1, 1)), // ISRAEL Pound,  replaced by ILR\r\n                new Currency(\"ZWC\", 716, 2, \"Rhodesian dollar\", \"$\", Iso4217Historic, new DateTime(1980, 12, 31), new DateTime(1970, 2, 17)), // replaced by ZWD\r\n                new Currency(\"LAJ\", 418, NotApplicableByte, \"Pathet Lao Kip\", \"₭\", Iso4217Historic, new DateTime(1979, 12, 31)), // replaced by LAK\r\n                new Currency(\"TPE\", 0, NotApplicableByte, \"Portuguese Timorese escudo\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(1976, 12, 31), new DateTime(1959, 1, 1)), // replaced by IDR\r\n                new Currency(\"UYP\", 858, NotApplicableByte, \"Uruguay Peso\", \"$\", Iso4217Historic, new DateTime(1975, 7, 1), new DateTime(1896, 1, 1)), // replaced by UYN\r\n                new Currency(\"CLE\", 0, NotApplicableByte, \"Chilean escudo\", \"Eº\", Iso4217Historic, new DateTime(1975, 12, 31), new DateTime(1960, 1, 1)), // replaced by CLP\r\n                new Currency(\"MAF\", 0, NotApplicableByte, \"Moroccan franc\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(1976, 12, 31), new DateTime(1921, 1, 1)), // replaced by MAD\r\n                new Currency(\"PTP\", 0, NotApplicableByte, \"Portuguese Timorese pataca\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(1958, 12, 31), new DateTime(1894, 1, 1)), // replaced by TPE\r\n                new Currency(\"TNF\", 0, 2, \"Tunisian franc\", \"F\", Iso4217Historic, new DateTime(1958, 12, 31), new DateTime(1991, 7, 1)), // replaced by TND\r\n                new Currency(\"NFD\", 0, 2, \"Newfoundland dollar\", \"$\", Iso4217Historic, new DateTime(1949, 12, 31), new DateTime(1865, 1, 1)), // replaced by CAD\r\n\r\n                // Added historic currencies of amendment 164 (research dates and other info)\r\n                new Currency(\"VNC\", 704, 2, \"Old Dong\", \"₫\", Iso4217Historic, new DateTime(2014, 1, 1)), // VIETNAM, replaced by VND with same number! Formerly, it was subdivided into 10 hào.\r\n                new Currency(\"GNS\", 324, NotApplicableByte, \"Guinean Syli\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(1970, 12, 31)), // GUINEA, replaced by GNE?\r\n                new Currency(\"UGW\", 800, NotApplicableByte, \"Old Shilling\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2017, 9, 22)), // UGANDA\r\n                new Currency(\"RHD\", 716, NotApplicableByte, \"Rhodesian Dollar\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2017, 9, 22)), // SOUTHERN RHODESIA\r\n                new Currency(\"ROK\", 642, NotApplicableByte, \"Leu A/52\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2017, 9, 22)), // ROMANIA\r\n                new Currency(\"NIC\", 558, NotApplicableByte, \"Cordoba\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2017, 9, 22)), // NICARAGUA\r\n                new Currency(\"MZE\", 508, NotApplicableByte, \"Mozambique Escudo\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2017, 9, 22)), // MOZAMBIQUE\r\n                new Currency(\"MTP\", 470, NotApplicableByte, \"Maltese Pound\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2017, 9, 22)), // MALTA\r\n                new Currency(\"LSM\", 426, NotApplicableByte, \"Loti\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2017, 9, 22)), // LESOTHO\r\n                new Currency(\"GWE\", 624, NotApplicableByte, \"Guinea Escudo\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2017, 9, 22)), // GUINEA-BISSAU\r\n                new Currency(\"CSJ\", 203, NotApplicableByte, \"Krona A/53\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2017, 9, 22)), // CZECHOSLOVAKIA\r\n                new Currency(\"BUK\", 104, NotApplicableByte, \"Kyat\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2017, 9, 22)), // BURMA\r\n                new Currency(\"BGK\", 100, NotApplicableByte, \"Lev A / 62\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2017, 9, 22)), // BULGARIA\r\n                new Currency(\"BGJ\", 100, NotApplicableByte, \"Lev A / 52\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2017, 9, 22)), // BULGARIA\r\n                new Currency(\"ARY\", 032, NotApplicableByte, \"Peso\", Currency.GenericCurrencySign, Iso4217Historic, new DateTime(2017, 9, 22)), // ARGENTINA\r\n            };\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/NodaMoney/CurrencyRegistry.cs b/src/NodaMoney/CurrencyRegistry.cs
--- a/src/NodaMoney/CurrencyRegistry.cs	
+++ b/src/NodaMoney/CurrencyRegistry.cs	
@@ -49,12 +49,12 @@
             }
             
             // TODO: tryout CurrencyUnit
-            LookupCurrencies = new Dictionary<CurrencyUnit, Currency>(currencies.Length);
-            foreach (var ci in currencies)
-            {
-                var cu = new CurrencyUnit(ci.Code);
-                LookupCurrencies[cu] = ci;
-            }
+            // LookupCurrencies = new Dictionary<CurrencyUnit, Currency>(currencies.Length);
+            // foreach (var ci in currencies)
+            // {
+            //     var cu = new CurrencyUnit(ci.Code);
+            //     LookupCurrencies[cu] = ci;
+            // }
 
             // var xa = Currencies.AsMemory();
             // TODO: Use ReadOnlySpan<T> or ReadOnlyMemory<T>  to split up namespaces? 0..999 ISO4127, 1000..9999 ISO4127-HISTORIC
Index: tests/NodaMoney.Tests/PerformanceReport.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>``` ini\r\n\r\nBenchmarkDotNet=v0.12.1, OS=Windows 10.0.22000\r\nAMD Ryzen 7 5800H with Radeon Graphics, 1 CPU, 16 logical and 8 physical cores\r\n  [Host]     : .NET Framework 4.8 (4.8.4515.0), X64 RyuJIT\r\n  DefaultJob : .NET Framework 4.8 (4.8.4515.0), X64 RyuJIT\r\n\r\n\r\n```\r\n## InitializingCurrency\r\n#### before\r\n|        Method |     Mean |   Error |  StdDev |  Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|-------------- |---------:|--------:|--------:|-------:|------:|------:|----------:|\r\n|      FromCode | 611.5 ns | 7.71 ns | 7.21 ns | 0.1354 |     - |     - |     429 B |\r\n#### after\r\n|        Method |     Mean |    Error |   StdDev | Allocated |\r\n|-------------- |---------:|---------:|---------:|----------:|\r\n|      FromCode | 22.53 ns | 0.398 ns | 0.353 ns |         - |\r\n| FromCodeBeRef | 20.27 ns | 0.339 ns | 0.283 ns |         - |\r\n### after as class\r\n|        Method |     Mean |    Error |   StdDev | Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|-------------- |---------:|---------:|---------:|------:|------:|------:|----------:|\r\n|      FromCode | 20.32 ns | 0.666 ns | 1.952 ns |     - |     - |     - |         - |\r\n| FromCodeBeRef | 21.68 ns | 0.661 ns | 1.949 ns |     - |     - |     - |         - |\r\n\r\n## InitializingMoney\r\n#### before\r\n|                              Method |      Mean |    Error |   StdDev | Ratio |  Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------------------------ |----------:|---------:|---------:|------:|-------:|------:|------:|----------:|\r\n|            ExplicitCurrencyAsString | 716.46 ns | 2.483 ns | 2.322 ns |  1.00 | 0.1354 |     - |     - |     429 B |\r\n| ExplicitCurrencyAsStringAndRounding | 721.48 ns | 5.749 ns | 5.378 ns |  1.01 | 0.1354 |     - |     - |     429 B |\r\n|            ExplicitCurrencyFromCode | 721.87 ns | 5.770 ns | 5.397 ns |  1.01 | 0.1354 |     - |     - |     429 B |\r\n|                        HelperMethod | 762.76 ns | 3.969 ns | 3.315 ns |  1.06 | 0.1354 |     - |     - |     429 B |\r\n|       ImplicitCurrencyByConstructor | 263.90 ns | 1.635 ns | 1.529 ns |  0.37 | 0.0124 |     - |     - |      40 B |\r\n|           ImplicitCurrencyByCasting | 286.37 ns | 1.883 ns | 1.761 ns |  0.40 | 0.0124 |     - |     - |      40 B |\r\n|                         Deconstruct |  63.05 ns | 0.328 ns | 0.307 ns |  0.09 |      - |     - |     - |         - |\r\n#### after\r\n|                              Method |      Mean |    Error |   StdDev | Ratio | RatioSD | Allocated |\r\n|------------------------------------ |----------:|---------:|---------:|------:|--------:|----------:|\r\n|            ExplicitCurrencyAsString | 160.89 ns | 1.788 ns | 1.585 ns |  1.00 |    0.00 |         - |\r\n| ExplicitCurrencyAsStringAndRounding | 163.87 ns | 1.791 ns | 1.495 ns |  1.02 |    0.01 |         - |\r\n|            ExplicitCurrencyFromCode | 159.54 ns | 1.680 ns | 1.489 ns |  0.99 |    0.01 |         - |\r\n|                        HelperMethod | 159.12 ns | 1.227 ns | 1.148 ns |  0.99 |    0.01 |         - |\r\n|       ImplicitCurrencyByConstructor | 171.27 ns | 2.014 ns | 1.884 ns |  1.06 |    0.01 |         - |\r\n|           ImplicitCurrencyByCasting | 169.77 ns | 2.456 ns | 2.297 ns |  1.05 |    0.02 |         - |\r\n|                         Deconstruct |  18.10 ns | 0.239 ns | 0.224 ns |  0.11 |    0.00 |         - |\r\n### after as class\r\n|                              Method |        Mean |     Error |     StdDev |      Median | Ratio | RatioSD | Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------------------------ |------------:|----------:|-----------:|------------:|------:|--------:|------:|------:|------:|----------:|\r\n|            ExplicitCurrencyAsString | 291.2011 ns | 5.7582 ns | 10.6731 ns | 292.0155 ns | 1.000 |    0.00 |     - |     - |     - |         - |\r\n| ExplicitCurrencyAsStringAndRounding | 291.1404 ns | 5.8337 ns | 12.3053 ns | 292.7434 ns | 0.997 |    0.05 |     - |     - |     - |         - |\r\n|            ExplicitCurrencyFromCode | 293.2023 ns | 5.8591 ns | 11.8356 ns | 293.2638 ns | 1.008 |    0.05 |     - |     - |     - |         - |\r\n|                        HelperMethod | 295.5661 ns | 5.9172 ns | 12.3514 ns | 293.7525 ns | 1.013 |    0.04 |     - |     - |     - |         - |\r\n|       ImplicitCurrencyByConstructor | 304.9541 ns | 6.0387 ns | 11.3421 ns | 306.0941 ns | 1.049 |    0.04 |     - |     - |     - |         - |\r\n|           ImplicitCurrencyByCasting | 304.1174 ns | 6.0599 ns | 12.2413 ns | 307.0236 ns | 1.044 |    0.05 |     - |     - |     - |         - |\r\n|                         Deconstruct |   0.0451 ns | 0.0231 ns |  0.0486 ns |   0.0345 ns | 0.000 |    0.00 |     - |     - |     - |         - |\r\n\r\n## MoneyOperations\r\n#### before\r\n|                   Method |      Mean |    Error |   StdDev | Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------------- |----------:|---------:|---------:|------:|------:|------:|----------:|\r\n|                 Addition | 589.40 ns | 2.720 ns | 2.544 ns |     - |     - |     - |         - |\r\n|              Subtraction | 590.93 ns | 3.519 ns | 3.291 ns |     - |     - |     - |         - |\r\n|      CompareSameCurrency |  87.50 ns | 0.342 ns | 0.320 ns |     - |     - |     - |         - |\r\n| CompareDifferentCurrency | 158.99 ns | 0.624 ns | 0.584 ns |     - |     - |     - |         - |\r\n|            CompareAmount | 474.49 ns | 1.128 ns | 1.000 ns |     - |     - |     - |         - |\r\n|                Increment | 855.93 ns | 2.963 ns | 2.771 ns |     - |     - |     - |         - |\r\n|                Decrement | 848.59 ns | 4.146 ns | 3.878 ns |     - |     - |     - |         - |\r\n#### after\r\n|                   Method |      Mean |    Error |   StdDev | Allocated |\r\n|------------------------- |----------:|---------:|---------:|----------:|\r\n|                 Addition | 162.28 ns | 1.918 ns | 1.701 ns |         - |\r\n|              Subtraction | 162.34 ns | 3.158 ns | 2.954 ns |         - |\r\n|      CompareSameCurrency |  25.84 ns | 0.432 ns | 0.383 ns |         - |\r\n| CompareDifferentCurrency |  32.52 ns | 0.661 ns | 0.734 ns |         - |\r\n|            CompareAmount |  19.30 ns | 0.365 ns | 0.305 ns |         - |\r\n|                Increment | 385.33 ns | 2.862 ns | 2.677 ns |         - |\r\n|                Decrement | 379.44 ns | 2.494 ns | 2.211 ns |         - |\r\n### after as class\r\n|                   Method |      Mean |     Error |    StdDev | Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------------- |----------:|----------:|----------:|------:|------:|------:|----------:|\r\n|                 Addition | 301.01 ns |  5.962 ns | 11.198 ns |     - |     - |     - |         - |\r\n|              Subtraction | 299.39 ns |  5.959 ns | 10.745 ns |     - |     - |     - |         - |\r\n|      CompareSameCurrency |  28.17 ns |  0.586 ns |  1.196 ns |     - |     - |     - |         - |\r\n| CompareDifferentCurrency |  38.29 ns |  0.792 ns |  2.235 ns |     - |     - |     - |         - |\r\n|            CompareAmount |  37.34 ns |  0.768 ns |  2.115 ns |     - |     - |     - |         - |\r\n|                Increment | 674.86 ns | 13.303 ns | 24.986 ns |     - |     - |     - |         - |\r\n|                Decrement | 700.62 ns | 13.703 ns | 15.780 ns |     - |     - |     - |         - |\r\n\r\n## MoneyFormatting\r\n#### before\r\n|             Method |     Mean |   Error |  StdDev |  Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------- |---------:|--------:|--------:|-------:|------:|------:|----------:|\r\n|           Implicit | 329.4 ns | 2.74 ns | 2.56 ns | 0.0520 |     - |     - |     164 B |\r\n| ImplicitWithFormat | 346.8 ns | 3.75 ns | 3.51 ns | 0.0520 |     - |     - |     164 B |\r\n|           Explicit | 399.8 ns | 2.49 ns | 2.33 ns | 0.0939 |     - |     - |     296 B |\r\n| ExplicitWithFormat | 414.0 ns | 2.07 ns | 1.94 ns | 0.0939 |     - |     - |     296 B |\r\n#### after\r\n|             Method |     Mean |   Error |  StdDev |  Gen 0 | Allocated |\r\n|------------------- |---------:|--------:|--------:|-------:|----------:|\r\n|           Implicit | 147.9 ns | 2.97 ns | 2.78 ns | 0.0286 |     240 B |\r\n| ImplicitWithFormat | 159.0 ns | 3.17 ns | 2.81 ns | 0.0286 |     240 B |\r\n|           Explicit | 215.9 ns | 3.92 ns | 3.67 ns | 0.0525 |     440 B |\r\n| ExplicitWithFormat | 218.0 ns | 4.41 ns | 4.12 ns | 0.0525 |     440 B |\r\n### after as class\r\n|             Method |     Mean |   Error |   StdDev |  Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------- |---------:|--------:|---------:|-------:|------:|------:|----------:|\r\n|           Implicit | 255.7 ns | 5.10 ns | 12.33 ns | 0.0420 |     - |     - |     265 B |\r\n| ImplicitWithFormat | 265.4 ns | 5.29 ns | 14.11 ns | 0.0420 |     - |     - |     265 B |\r\n|           Explicit | 302.1 ns | 6.03 ns | 16.41 ns | 0.0763 |     - |     - |     481 B |\r\n| ExplicitWithFormat | 310.4 ns | 8.04 ns | 23.72 ns | 0.0763 |     - |     - |     481 B |\r\n\r\n## MoneyParsing\r\n#### before\r\n|      Method |     Mean |     Error |    StdDev |  Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------ |---------:|----------:|----------:|-------:|------:|------:|----------:|\r\n|    Implicit | 1.360 us | 0.0101 us | 0.0095 us | 0.1869 |     - |     - |     593 B |\r\n| ImplicitTry | 1.314 us | 0.0108 us | 0.0101 us | 0.1869 |     - |     - |     593 B |\r\n|    Explicit | 1.255 us | 0.0092 us | 0.0082 us | 0.2613 |     - |     - |     825 B |\r\n| ExplicitTry | 1.341 us | 0.0052 us | 0.0049 us | 0.2613 |     - |     - |     825 B |\r\n#### after\r\n|      Method |       Mean |    Error |   StdDev |  Gen 0 | Allocated |\r\n|------------ |-----------:|---------:|---------:|-------:|----------:|\r\n|    Implicit | 2,644.6 ns | 46.39 ns | 56.97 ns | 0.1526 |   1,280 B |\r\n| ImplicitTry | 2,598.3 ns | 26.53 ns | 22.15 ns | 0.1526 |   1,280 B |\r\n|    Explicit |   442.4 ns |  4.92 ns |  4.36 ns | 0.0715 |     600 B |\r\n| ExplicitTry |   459.5 ns |  7.30 ns |  6.83 ns | 0.0715 |     600 B |\r\n### after as class\r\n|      Method |       Mean |    Error |    StdDev |  Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------ |-----------:|---------:|----------:|-------:|------:|------:|----------:|\r\n|    Implicit | 1,345.5 ns | 34.66 ns | 102.19 ns | 0.1354 |     - |     - |     859 B |\r\n| ImplicitTry | 1,395.7 ns | 43.70 ns | 128.86 ns | 0.1354 |     - |     - |     859 B |\r\n|    Explicit |   794.9 ns | 16.03 ns |  47.28 ns | 0.1030 |     - |     - |     650 B |\r\n| ExplicitTry |   783.0 ns | 17.38 ns |  51.23 ns | 0.1030 |     - |     - |     650 B |\r\n\r\n## AddingCustomCurrency\r\n#### before\r\n|        Method |      Mean |    Error |   StdDev |  Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|-------------- |----------:|---------:|---------:|-------:|------:|------:|----------:|\r\n| CreateBuilder |  22.81 ns | 0.382 ns | 0.357 ns | 0.0191 |     - |     - |      60 B |\r\n|         Build |  73.28 ns | 0.523 ns | 0.489 ns |      - |     - |     - |         - |\r\n|      Register |        NA |       NA |       NA |      - |     - |     - |         - |\r\n|    Unregister |        NA |       NA |       NA |      - |     - |     - |         - |\r\n|       Replace | 601.07 ns | 4.807 ns | 4.496 ns | 0.0668 |     - |     - |     212 B |\r\n\r\nBenchmarks with issues:\r\n  AddingCustomCurrencyBenchmarks.Register: DefaultJob\r\n  AddingCustomCurrencyBenchmarks.Unregister: DefaultJob\r\n#### after\r\n|        Method |     Mean |    Error |   StdDev |  Gen 0 | Allocated |\r\n|-------------- |---------:|---------:|---------:|-------:|----------:|\r\n| CreateBuilder | 32.55 ns | 0.541 ns | 0.556 ns | 0.0105 |      88 B |\r\n|         Build | 28.38 ns | 0.557 ns | 0.547 ns |      - |         - |\r\n### after as class\r\n|        Method |     Mean |    Error |   StdDev |  Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|-------------- |---------:|---------:|---------:|-------:|------:|------:|----------:|\r\n| CreateBuilder | 97.77 ns | 2.649 ns | 7.810 ns | 0.0139 |     - |     - |      88 B |\r\n|         Build | 34.83 ns | 1.019 ns | 2.972 ns | 0.0127 |     - |     - |      80 B |\r\n\r\n## HighLoad\r\n#### before\r\n|                     Method |     Mean |   Error |  StdDev |       Gen 0 |     Gen 1 |     Gen 2 | Allocated |\r\n|--------------------------- |---------:|--------:|--------:|------------:|----------:|----------:|----------:|\r\n| CreatingOneMillionCurrency | 665.3 ms | 3.53 ms | 3.30 ms | 137000.0000 | 1000.0000 | 1000.0000 | 458.37 MB |\r\n|    CreatingOneMillionMoney | 788.5 ms | 6.80 ms | 6.36 ms | 137000.0000 | 1000.0000 | 1000.0000 | 473.63 MB |\r\n#### after\r\n|                          Method |      Mean |    Error |   StdDev |    Median |     Gen 0 |    Gen 1 |    Gen 2 | Allocated |\r\n|-------------------------------- |----------:|---------:|---------:|----------:|----------:|---------:|---------:|----------:|\r\n| CreatingOneMillionCurrencyUnits |  24.99 ms | 0.573 ms | 1.689 ms |  25.24 ms | 8093.7500 | 468.7500 | 468.7500 |     65 MB |\r\n|      CreatingOneMillionCurrency |  45.06 ms | 1.173 ms | 3.328 ms |  44.97 ms |  333.3333 | 333.3333 | 333.3333 |     61 MB |\r\n|         CreatingOneMillionMoney | 152.33 ms | 3.033 ms | 6.907 ms | 149.71 ms |         - |        - |        - |     76 MB |\r\n\r\n\r\n### after Currency as class\r\n|                          Method |      Mean |    Error |   StdDev |     Gen 0 |    Gen 1 |    Gen 2 | Allocated |\r\n|-------------------------------- |----------:|---------:|---------:|----------:|---------:|---------:|----------:|\r\n| CreatingOneMillionCurrencyUnits |  24.28 ms | 0.480 ms | 1.401 ms | 8093.7500 | 468.7500 | 468.7500 |     64 MB |\r\n|      CreatingOneMillionCurrency |  18.68 ms | 0.372 ms | 1.012 ms |  312.5000 | 312.5000 | 312.5000 |      8 MB |\r\n|         CreatingOneMillionMoney | 122.52 ms | 1.551 ms | 1.451 ms |  200.0000 | 200.0000 | 200.0000 |     23 MB |\r\n
===================================================================
diff --git a/tests/NodaMoney.Tests/PerformanceReport.md b/tests/NodaMoney.Tests/PerformanceReport.md
--- a/tests/NodaMoney.Tests/PerformanceReport.md	
+++ b/tests/NodaMoney.Tests/PerformanceReport.md	
@@ -169,11 +169,9 @@
 | CreatingOneMillionCurrencyUnits |  24.99 ms | 0.573 ms | 1.689 ms |  25.24 ms | 8093.7500 | 468.7500 | 468.7500 |     65 MB |
 |      CreatingOneMillionCurrency |  45.06 ms | 1.173 ms | 3.328 ms |  44.97 ms |  333.3333 | 333.3333 | 333.3333 |     61 MB |
 |         CreatingOneMillionMoney | 152.33 ms | 3.033 ms | 6.907 ms | 149.71 ms |         - |        - |        - |     76 MB |
-
-
 ### after Currency as class
 |                          Method |      Mean |    Error |   StdDev |     Gen 0 |    Gen 1 |    Gen 2 | Allocated |
 |-------------------------------- |----------:|---------:|---------:|----------:|---------:|---------:|----------:|
-| CreatingOneMillionCurrencyUnits |  24.28 ms | 0.480 ms | 1.401 ms | 8093.7500 | 468.7500 | 468.7500 |     64 MB |
-|      CreatingOneMillionCurrency |  18.68 ms | 0.372 ms | 1.012 ms |  312.5000 | 312.5000 | 312.5000 |      8 MB |
-|         CreatingOneMillionMoney | 122.52 ms | 1.551 ms | 1.451 ms |  200.0000 | 200.0000 | 200.0000 |     23 MB |
+| CreatingOneMillionCurrencyUnits |  22.87 ms | 0.660 ms | 1.946 ms | 8093.7500 | 468.7500 | 468.7500 |     63 MB |
+|      CreatingOneMillionCurrency |  23.19 ms | 0.460 ms | 1.000 ms |  312.5000 | 312.5000 | 312.5000 |      8 MB |
+|         CreatingOneMillionMoney | 123.35 ms | 2.260 ms | 2.004 ms |         - |        - |        - |     23 MB |
