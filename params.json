{
  "name": "NodaMoney",
  "tagline": "NodaMoney provides a library that treats Money as a first class citizen and handles all the ugly bits like currencies and formatting. ",
  "body": "About\r\n----\r\nNodaMoney provides a library that treats Money as a first class citizen in .NET and handles all the ugly bits like currencies\r\nand formatting.\r\n\r\nWe have the [decimal type](http://msdn.microsoft.com/en-us/library/364x0z75.aspx) in .NET to store an amount of money, which can\r\nbe used for very basic things. But it's still a numeric value without knowledge about its currency, major and minor units, \r\nformatting, etc. The .NET Framework has the System.Globalization namespace that helps with formatting of money in different cultures and regions,\r\nbut it only captures some info about currencies, but not everything.\r\n\r\nThere is also some business logic surronding money, like dividing without losing pennies (like in the movie [Office Space](http://www.imdb.com/title/tt0151804/)),\r\nconversion, etc. that motivates to have a Money type that contains all the domain logic, like Martin Fowler already descibed in\r\nhis book [Patterns of Enterprise Application Architecture](http://martinfowler.com/eaaCatalog/money.html)\r\n\r\nNodaMoney represents the .NET counterpart of java library [JodaMoney](http://www.joda.org/joda-money/), like NodaTime is the .NET\r\ncounterpart of JodaTime. NodaMoney does not provide, nor is it intended to provide, monetary algorithms beyond the most basic and \r\nobvious. This is because the requirements for these algorithms vary widely between domains. This library is intended to act as the\r\nbase layer, providing classes that should be in the .NET Framework. It complies with the currencies in [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217).\r\n\r\nUsage\r\n-----\r\nAt the moment there are three classes:\r\n- Currency: An immutable structure that represents a currency. It can give all ISO 4217 currencies.\r\n- Money: An immutable structure that represents money in a specified currency.\r\n- ExchangeRate: A stucture that represents a [currency pair](http://en.wikipedia.org/wiki/Currency_pair) that can convert money\r\nfrom one currency to another currency.\r\n\r\n**Initalizing money**\r\n\r\n```C#\r\n// define money with explicit currency\r\nvar euros = new Money(6.54m, Currency.FromCode(\"EUR\"));\r\nvar euros = new Money(6.54m, \"EUR\");\r\n\r\n// define money explicit using helper method for most used currencies in the world\r\nvar euros = Money.Euro(6.54m);\r\nvar euros = Money.USDollar(6.54m);\r\nvar euros = Money.PoundSterling(6.54m);\r\nvar euros = Money.Yen(6);\r\n\r\n// define money implicit using currency of current culture/region\r\nvar money = new Money(6.54m);\r\nMoney money = 6.54m;\r\nMoney money = 6;\r\nMoney money = (Money)6.54; // need explict cast from double data type  \r\n\r\n// auto-rounding to the minor unit will take place with MidpointRounding.ToEven\r\n// also known as banker's rounding \r\nvar euro = new Money(765.425m, \"EUR\"); // EUR 765.42\r\nvar euro = new Money(765.425m, \"EUR\", MidpointRounding.AwayFromZero); // EUR 765.43\r\n```\r\n\r\n**Money operations**\r\n\r\n```C#\r\nvar euro10 = Money.Euro(10);\r\nvar euro20 = Money.Euro(20);\r\nvar dollar10 = Money.USDollar(10);\r\n\r\n// add and substract\r\nvar euro30 = euro10 + euro20;\r\nvar euro10 = euro20 - euro10;\r\nvar m = euro10 + dollar10; // will throw exception!\r\neuro10 += euro20;\r\neuro10 -= euro20;\r\n\r\n// compare money\r\neuro10 == euro20; // false\r\neuro10 != euro20; // true;\r\neuro10 == dollar10; // false;\r\neuro20 > euro10; // true;\r\neuro10 <= dollar10; // will throw exception!\r\n\r\n// decrement and increment by minor unit\r\nvar yen = new Money(765m, \"JPY\"); // the smallest unit is 1 yen\r\nvar euro = new Money(765.43m, \"EUR\");\r\n++yen; // JPY 766\r\n--yen; // JPY 765\r\n++euro; // EUR 765.44\r\n--euro; // EUR 765.43\r\n```\r\n\r\n**Money formatting**\r\n\r\n```C#\r\nvar yen = new Money(765m, \"JPY\");\r\nvar euro = new Money(765.43m, \"EUR\");\r\nvar dollar = new Money(765.43m, \"USD\");\r\nvar dinar = new Money(765.432m, \"BHD\");\r\n\r\n// Implicit when current culture is 'en-US'\r\nyen.ToString();    // \"¥765\"\r\neuro.ToString();   // \"€765.43\"\r\ndollar.ToString(); // \"$765.43\"\r\ndinar.ToString();  // \"BD765.432\"\r\n\r\nyen.ToString(\"C2\");    // \"¥765.00\"\r\neuro.ToString(\"C2\");   // \"€765.43\"\r\ndollar.ToString(\"C2\"); // \"$765.43\"\r\ndinar.ToString(\"C2\");  // \"BD765.43\"\r\n\r\n// Implicit when current culture is 'nl-BE'\r\nyen.ToString();    // \"¥ 765\"\r\neuro.ToString();   // \"€ 765,43\"\r\ndollar.ToString(); // \"$ 765,43\"\r\ndinar.ToString();  // \"BD 765,432\"\r\n\r\n// Implicit when current culture is 'fr-BE'\r\nyen.ToString();    // \"765 ¥\"\r\neuro.ToString();   // \"765,43 €\"\r\ndollar.ToString(); // \"765,43 $\"\r\ndinar.ToString();  // \"765,432 BD\"\r\n}\r\n\r\n// Explicit format for culture 'nl-NL'\r\nvar ci = new CultureInfo(\"nl-NL\");\r\n\r\nyen.ToString(ci);    // \"¥ 765\"\r\neuro.ToString(ci);   // \"€ 765,43\"\r\ndollar.ToString(ci); // \"$ 765,43\"\r\ndinar.ToString(ci);  // \"BD 765,432\"\r\n```\r\n\r\nSupport & Contributing\r\n----------------------\r\nFor support, bugs and new ideas use [GitHub issues](https://github.com/remyvd/NodaMoney/issues). Please see our\r\n[guidelines](CONTRIBUTING.md) for contributing to the NodaMoney.\r\n\r\nBuild status: [![Build status](https://ci.appveyor.com/api/projects/status/o656q9bagslgusj9?svg=true)](https://ci.appveyor.com/project/remyvd/nodamoney)\r\n\r\n<a href=\"https://zenhub.io\"><img src=\"https://raw.githubusercontent.com/ZenHubIO/support/master/zenhub-badge.png\" height=\"18px\"></a>",
  "google": "UA-83952219-1",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}